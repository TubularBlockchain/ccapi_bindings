/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

// source: /Users/los/dev/tubular/ccapi/binding/build/go/swig_interface.i


extern
#ifdef __cplusplus
  "C"
#endif
  void cgo_panic__ccapi_00042a34e9364138(const char*);
static void _swig_gopanic(const char *p) {
  cgo_panic__ccapi_00042a34e9364138(p);
}



#define SWIG_VERSION 0x040300
#define SWIGGO
#define SWIGMODULE ccapi
#define SWIG_DIRECTORS
/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 *
 * Note that SWIG expects __cplusplus to be defined to the appropriate C++ standard.
 * MSVC users are urged to check and examine the /Zc:__cplusplus compiler option.
 * See https://learn.microsoft.com/en-us/cpp/build/reference/zc-cplusplus.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;


# if !defined(__clang__) && (defined(__i386__) || defined(__x86_64__))
#   define SWIGSTRUCTPACKED __attribute__((__packed__, __gcc_struct__))
# else
#   define SWIGSTRUCTPACKED __attribute__((__packed__))
# endif



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;



#define SWIG_exception(code, msg) _swig_gopanic(msg)


static _gostring_ Swig_AllocateString(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)malloc(l);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Go proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#include <exception>
#include <map>

namespace Swig {

  class DirectorException : public std::exception {
  };
}

/* Handle memory management for directors.  */

namespace {
  struct GCItem {
    virtual ~GCItem() {}
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem* operator->() {
      return _item;
    }

    private:
      GCItem *_item;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };
}

class Swig_memory {
public:
  template <typename Type>
  void swig_acquire_pointer(Type* vptr) {
    if (vptr) {
      swig_owner[vptr] = new GCItem_T<Type>(vptr);
    }
  }
private:
  typedef std::map<void *, GCItem_var> swig_ownership_map;
  swig_ownership_map swig_owner;
};

template <typename Type>
static void swig_acquire_pointer(Swig_memory** pmem, Type* ptr) {
  if (!pmem) {
    *pmem = new Swig_memory;
  }
  (*pmem)->swig_acquire_pointer(ptr);
}

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


static void Swig_free(void* p) {
  free(p);
}

static void* Swig_malloc(int c) {
  return malloc(c);
}


#ifndef SWIG
#define SWIG
#endif
#include "ccapi_cpp/ccapi_macro.h"
#include "ccapi_cpp/ccapi_util.h"
#include "ccapi_cpp/ccapi_element.h"
#include "ccapi_cpp/ccapi_message.h"
#include "ccapi_cpp/ccapi_event.h"
#include "ccapi_cpp/ccapi_event_handler.h"
#include "ccapi_cpp/ccapi_event_dispatcher.h"
#include "ccapi_cpp/ccapi_subscription.h"
#include "ccapi_cpp/ccapi_request.h"
#include "ccapi_cpp/ccapi_session_options.h"
#include "ccapi_cpp/ccapi_session_configs.h"
#include "ccapi_cpp/ccapi_queue.h"
#include "ccapi_cpp/ccapi_session.h"
#include "ccapi_cpp/ccapi_logger.h"


#include <typeinfo>
#include <stdexcept>


#include <utility>


#include <string>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <vector>
#include <stdexcept>

SWIGINTERN std::string const &std_map_Sl_std_string_Sc_std_string_Sg__get(std::map< std::string,std::string > *self,std::string const &key){
                std::map< std::string, std::string, std::less< std::string > >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__set(std::map< std::string,std::string > *self,std::string const &key,std::string const &x){
#ifdef __cpp_lib_map_try_emplace
                (*self).insert_or_assign(key, x);
#else
                (*self)[key] = x;
#endif
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__del(std::map< std::string,std::string > *self,std::string const &key){
                std::map< std::string, std::string, std::less< std::string > >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__has_key(std::map< std::string,std::string > *self,std::string const &key){
                std::map< std::string, std::string, std::less< std::string > >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN std::string const &std_map_Sl_int_Sc_std_string_Sg__get(std::map< int,std::string > *self,int const &key){
                std::map< int, std::string, std::less< int > >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_int_Sc_std_string_Sg__set(std::map< int,std::string > *self,int const &key,std::string const &x){
#ifdef __cpp_lib_map_try_emplace
                (*self).insert_or_assign(key, x);
#else
                (*self)[key] = x;
#endif
            }
SWIGINTERN void std_map_Sl_int_Sc_std_string_Sg__del(std::map< int,std::string > *self,int const &key){
                std::map< int, std::string, std::less< int > >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_int_Sc_std_string_Sg__has_key(std::map< int,std::string > *self,int const &key){
                std::map< int, std::string, std::less< int > >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN std::vector< std::pair< int,std::string > >::const_reference std_vector_Sl_std_pair_Sl_int_Sc_std_string_Sg__Sg__get(std::vector< std::pair< int,std::string > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_pair_Sl_int_Sc_std_string_Sg__Sg__set(std::vector< std::pair< int,std::string > > *self,int i,std::vector< std::pair< int,std::string > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< ccapi::Element >::const_reference std_vector_Sl_ccapi_Element_Sg__get(std::vector< ccapi::Element > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_ccapi_Element_Sg__set(std::vector< ccapi::Element > *self,int i,std::vector< ccapi::Element >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< ccapi::Message >::const_reference std_vector_Sl_ccapi_Message_Sg__get(std::vector< ccapi::Message > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_ccapi_Message_Sg__set(std::vector< ccapi::Message > *self,int i,std::vector< ccapi::Message >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::map< std::string,std::string,std::less< std::string > > const &std_map_Sl_std_string_Sc_std_map_Sl_std_string_Sc_std_string_Sg__Sg__get(std::map< std::string,std::map< std::string,std::string > > *self,std::string const &key){
                std::map< std::string, std::map< std::string,std::string,std::less< std::string > >, std::less< std::string > >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_map_Sl_std_string_Sc_std_string_Sg__Sg__set(std::map< std::string,std::map< std::string,std::string > > *self,std::string const &key,std::map< std::string,std::string,std::less< std::string > > const &x){
#ifdef __cpp_lib_map_try_emplace
                (*self).insert_or_assign(key, x);
#else
                (*self)[key] = x;
#endif
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_map_Sl_std_string_Sc_std_string_Sg__Sg__del(std::map< std::string,std::map< std::string,std::string > > *self,std::string const &key){
                std::map< std::string, std::map< std::string,std::string,std::less< std::string > >, std::less< std::string > >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_map_Sl_std_string_Sc_std_string_Sg__Sg__has_key(std::map< std::string,std::map< std::string,std::string > > *self,std::string const &key){
                std::map< std::string, std::map< std::string,std::string,std::less< std::string > >, std::less< std::string > >::iterator i = self->find(key);
                return i != self->end();
            }
SWIGINTERN std::vector< ccapi::Event >::const_reference std_vector_Sl_ccapi_Event_Sg__get(std::vector< ccapi::Event > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_ccapi_Event_Sg__set(std::vector< ccapi::Event > *self,int i,std::vector< ccapi::Event >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< ccapi::Subscription >::const_reference std_vector_Sl_ccapi_Subscription_Sg__get(std::vector< ccapi::Subscription > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_ccapi_Subscription_Sg__set(std::vector< ccapi::Subscription > *self,int i,std::vector< ccapi::Subscription >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< ccapi::Request >::const_reference std_vector_Sl_ccapi_Request_Sg__get(std::vector< ccapi::Request > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_ccapi_Request_Sg__set(std::vector< ccapi::Request > *self,int i,std::vector< ccapi::Request >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#include <memory>


// C++ director class methods.
#include "swig_interface_wrap.h"

SwigDirector_EventHandler::SwigDirector_EventHandler(int swig_p)
    : ccapi::EventHandler(),
      go_val(swig_p), swig_mem(0)
{ }

extern "C" void Swiggo_DeleteDirector_EventHandler_ccapi_00042a34e9364138(intgo);
SwigDirector_EventHandler::~SwigDirector_EventHandler()
{
  Swiggo_DeleteDirector_EventHandler_ccapi_00042a34e9364138(go_val);
  delete swig_mem;
}

extern "C" bool Swig_DirectorEventHandler_callback_processEvent_ccapi_00042a34e9364138(int, ccapi::Event *arg2, ccapi::Session *arg3);
bool SwigDirector_EventHandler::processEvent(ccapi::Event const &event,ccapi::Session *sessionPtr) {
  bool c_result = SwigValueInit< bool >() ;
  bool result;
  ccapi::Event *swig_arg2;
  ccapi::Session *swig_arg3;
  
  swig_arg2 = (ccapi::Event *)&event; 
  *(ccapi::Session **)&swig_arg3 = (ccapi::Session *)sessionPtr; 
  result = Swig_DirectorEventHandler_callback_processEvent_ccapi_00042a34e9364138(go_val, swig_arg2, swig_arg3);
  c_result = (bool)result; 
  return c_result;
}

SwigDirector_Logger::SwigDirector_Logger(int swig_p)
    : ccapi::Logger(),
      go_val(swig_p), swig_mem(0)
{ }

extern "C" void Swiggo_DeleteDirector_Logger_ccapi_00042a34e9364138(intgo);
SwigDirector_Logger::~SwigDirector_Logger()
{
  Swiggo_DeleteDirector_Logger_ccapi_00042a34e9364138(go_val);
  delete swig_mem;
}

extern "C" void Swig_DirectorLogger_callback_logMessage_ccapi_00042a34e9364138(int, _gostring_ arg2, _gostring_ arg3, _gostring_ arg4, _gostring_ arg5, _gostring_ arg6, _gostring_ arg7);
void SwigDirector_Logger::logMessage(std::string const &severity,std::string const &threadId,std::string const &timeISO,std::string const &fileName,std::string const &lineNumber,std::string const &message) {
  _gostring_ swig_arg2;
  _gostring_ swig_arg3;
  _gostring_ swig_arg4;
  _gostring_ swig_arg5;
  _gostring_ swig_arg6;
  _gostring_ swig_arg7;
  
  swig_arg2 = Swig_AllocateString((&severity)->data(), (&severity)->length()); 
  swig_arg3 = Swig_AllocateString((&threadId)->data(), (&threadId)->length()); 
  swig_arg4 = Swig_AllocateString((&timeISO)->data(), (&timeISO)->length()); 
  swig_arg5 = Swig_AllocateString((&fileName)->data(), (&fileName)->length()); 
  swig_arg6 = Swig_AllocateString((&lineNumber)->data(), (&lineNumber)->length()); 
  swig_arg7 = Swig_AllocateString((&message)->data(), (&message)->length()); 
  Swig_DirectorLogger_callback_logMessage_ccapi_00042a34e9364138(go_val, swig_arg2, swig_arg3, swig_arg4, swig_arg5, swig_arg6, swig_arg7);
}

#ifdef __cplusplus
extern "C" {
#endif

void _wrap_Swig_free_ccapi_00042a34e9364138(void *_swig_go_0) {
  void *arg1 = (void *) 0 ;
  
  arg1 = *(void **)&_swig_go_0; 
  
  Swig_free(arg1);
  
}


void *_wrap_Swig_malloc_ccapi_00042a34e9364138(intgo _swig_go_0) {
  int arg1 ;
  void *result = 0 ;
  void *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  result = (void *)Swig_malloc(arg1);
  *(void **)&_swig_go_result = (void *)result; 
  return _swig_go_result;
}


std::map< std::string,std::string > *_wrap_new_MapStringString__SWIG_0_ccapi_00042a34e9364138() {
  std::map< std::string,std::string > *result = 0 ;
  std::map< std::string,std::string > *_swig_go_result;
  
  
  {
    try {
      result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::map< std::string,std::string > **)&_swig_go_result = (std::map< std::string,std::string > *)result; 
  return _swig_go_result;
}


std::map< std::string,std::string > *_wrap_new_MapStringString__SWIG_1_ccapi_00042a34e9364138(std::map< std::string,std::string > *_swig_go_0) {
  std::map< std::string,std::string > *arg1 = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  std::map< std::string,std::string > *_swig_go_result;
  
  arg1 = *(std::map< std::string,std::string > **)&_swig_go_0; 
  
  {
    try {
      result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >((std::map< std::string,std::string > const &)*arg1);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::map< std::string,std::string > **)&_swig_go_result = (std::map< std::string,std::string > *)result; 
  return _swig_go_result;
}


intgo _wrap_MapStringString_size_ccapi_00042a34e9364138(std::map< std::string,std::string > *_swig_go_0) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(std::map< std::string,std::string > **)&_swig_go_0; 
  
  {
    try {
      result = (unsigned int)((std::map< std::string,std::string > const *)arg1)->size();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_MapStringString_empty_ccapi_00042a34e9364138(std::map< std::string,std::string > *_swig_go_0) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::map< std::string,std::string > **)&_swig_go_0; 
  
  {
    try {
      result = (bool)((std::map< std::string,std::string > const *)arg1)->empty();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_MapStringString_clear_ccapi_00042a34e9364138(std::map< std::string,std::string > *_swig_go_0) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  arg1 = *(std::map< std::string,std::string > **)&_swig_go_0; 
  
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


_gostring_ _wrap_MapStringString_get_ccapi_00042a34e9364138(std::map< std::string,std::string > *_swig_go_0, _gostring_ _swig_go_1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(std::map< std::string,std::string > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      try {
        result = (std::string *) &std_map_Sl_std_string_Sc_std_string_Sg__get(arg1,(std::string const &)*arg2);
      } catch(std::out_of_range &_e) {
        _swig_gopanic((&_e)->what());
      }
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_MapStringString_set_ccapi_00042a34e9364138(std::map< std::string,std::string > *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(std::map< std::string,std::string > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      std_map_Sl_std_string_Sc_std_string_Sg__set(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_MapStringString_del_ccapi_00042a34e9364138(std::map< std::string,std::string > *_swig_go_0, _gostring_ _swig_go_1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(std::map< std::string,std::string > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      try {
        std_map_Sl_std_string_Sc_std_string_Sg__del(arg1,(std::string const &)*arg2);
      } catch(std::out_of_range &_e) {
        _swig_gopanic((&_e)->what());
      }
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


bool _wrap_MapStringString_has_key_ccapi_00042a34e9364138(std::map< std::string,std::string > *_swig_go_0, _gostring_ _swig_go_1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::map< std::string,std::string > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__has_key(arg1,(std::string const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_MapStringString_ccapi_00042a34e9364138(std::map< std::string,std::string > *_swig_go_0) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  arg1 = *(std::map< std::string,std::string > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


std::map< int,std::string > *_wrap_new_MapIntString__SWIG_0_ccapi_00042a34e9364138() {
  std::map< int,std::string > *result = 0 ;
  std::map< int,std::string > *_swig_go_result;
  
  
  {
    try {
      result = (std::map< int,std::string > *)new std::map< int,std::string >();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::map< int,std::string > **)&_swig_go_result = (std::map< int,std::string > *)result; 
  return _swig_go_result;
}


std::map< int,std::string > *_wrap_new_MapIntString__SWIG_1_ccapi_00042a34e9364138(std::map< int,std::string > *_swig_go_0) {
  std::map< int,std::string > *arg1 = 0 ;
  std::map< int,std::string > *result = 0 ;
  std::map< int,std::string > *_swig_go_result;
  
  arg1 = *(std::map< int,std::string > **)&_swig_go_0; 
  
  {
    try {
      result = (std::map< int,std::string > *)new std::map< int,std::string >((std::map< int,std::string > const &)*arg1);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::map< int,std::string > **)&_swig_go_result = (std::map< int,std::string > *)result; 
  return _swig_go_result;
}


intgo _wrap_MapIntString_size_ccapi_00042a34e9364138(std::map< int,std::string > *_swig_go_0) {
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(std::map< int,std::string > **)&_swig_go_0; 
  
  {
    try {
      result = (unsigned int)((std::map< int,std::string > const *)arg1)->size();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_MapIntString_empty_ccapi_00042a34e9364138(std::map< int,std::string > *_swig_go_0) {
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::map< int,std::string > **)&_swig_go_0; 
  
  {
    try {
      result = (bool)((std::map< int,std::string > const *)arg1)->empty();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_MapIntString_clear_ccapi_00042a34e9364138(std::map< int,std::string > *_swig_go_0) {
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  
  arg1 = *(std::map< int,std::string > **)&_swig_go_0; 
  
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


_gostring_ _wrap_MapIntString_get_ccapi_00042a34e9364138(std::map< int,std::string > *_swig_go_0, intgo _swig_go_1) {
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  int *arg2 = 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(std::map< int,std::string > **)&_swig_go_0; 
  arg2 = (int *)&_swig_go_1; 
  
  {
    try {
      try {
        result = (std::string *) &std_map_Sl_int_Sc_std_string_Sg__get(arg1,(int const &)*arg2);
      } catch(std::out_of_range &_e) {
        _swig_gopanic((&_e)->what());
      }
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  
  return _swig_go_result;
}


void _wrap_MapIntString_set_ccapi_00042a34e9364138(std::map< int,std::string > *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2) {
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  int *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(std::map< int,std::string > **)&_swig_go_0; 
  arg2 = (int *)&_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      std_map_Sl_int_Sc_std_string_Sg__set(arg1,(int const &)*arg2,(std::string const &)*arg3);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
  
}


void _wrap_MapIntString_del_ccapi_00042a34e9364138(std::map< int,std::string > *_swig_go_0, intgo _swig_go_1) {
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  int *arg2 = 0 ;
  
  arg1 = *(std::map< int,std::string > **)&_swig_go_0; 
  arg2 = (int *)&_swig_go_1; 
  
  {
    try {
      try {
        std_map_Sl_int_Sc_std_string_Sg__del(arg1,(int const &)*arg2);
      } catch(std::out_of_range &_e) {
        _swig_gopanic((&_e)->what());
      }
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
  
}


bool _wrap_MapIntString_has_key_ccapi_00042a34e9364138(std::map< int,std::string > *_swig_go_0, intgo _swig_go_1) {
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  int *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::map< int,std::string > **)&_swig_go_0; 
  arg2 = (int *)&_swig_go_1; 
  
  {
    try {
      result = (bool)std_map_Sl_int_Sc_std_string_Sg__has_key(arg1,(int const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  
  return _swig_go_result;
}


void _wrap_delete_MapIntString_ccapi_00042a34e9364138(std::map< int,std::string > *_swig_go_0) {
  std::map< int,std::string > *arg1 = (std::map< int,std::string > *) 0 ;
  
  arg1 = *(std::map< int,std::string > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


std::pair< int,std::string > *_wrap_new_PairIntString__SWIG_0_ccapi_00042a34e9364138() {
  std::pair< int,std::string > *result = 0 ;
  std::pair< int,std::string > *_swig_go_result;
  
  
  {
    try {
      result = (std::pair< int,std::string > *)new std::pair< int,std::string >();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::pair< int,std::string > **)&_swig_go_result = (std::pair< int,std::string > *)result; 
  return _swig_go_result;
}


std::pair< int,std::string > *_wrap_new_PairIntString__SWIG_1_ccapi_00042a34e9364138(intgo _swig_go_0, _gostring_ _swig_go_1) {
  int arg1 ;
  std::string arg2 ;
  std::pair< int,std::string > *result = 0 ;
  std::pair< int,std::string > *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  
  {
    try {
      result = (std::pair< int,std::string > *)new std::pair< int,std::string >(arg1,SWIG_STD_MOVE(arg2));
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::pair< int,std::string > **)&_swig_go_result = (std::pair< int,std::string > *)result; 
  return _swig_go_result;
}


std::pair< int,std::string > *_wrap_new_PairIntString__SWIG_2_ccapi_00042a34e9364138(std::pair< int,std::string > *_swig_go_0) {
  std::pair< int,std::string > *arg1 = 0 ;
  std::pair< int,std::string > *result = 0 ;
  std::pair< int,std::string > *_swig_go_result;
  
  arg1 = *(std::pair< int,std::string > **)&_swig_go_0; 
  
  {
    try {
      result = (std::pair< int,std::string > *)new std::pair< int,std::string >((std::pair< int,std::string > const &)*arg1);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::pair< int,std::string > **)&_swig_go_result = (std::pair< int,std::string > *)result; 
  return _swig_go_result;
}


void _wrap_PairIntString_first_set_ccapi_00042a34e9364138(std::pair< int,std::string > *_swig_go_0, intgo _swig_go_1) {
  std::pair< int,std::string > *arg1 = (std::pair< int,std::string > *) 0 ;
  int arg2 ;
  
  arg1 = *(std::pair< int,std::string > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->first = arg2;
  
}


intgo _wrap_PairIntString_first_get_ccapi_00042a34e9364138(std::pair< int,std::string > *_swig_go_0) {
  std::pair< int,std::string > *arg1 = (std::pair< int,std::string > *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(std::pair< int,std::string > **)&_swig_go_0; 
  
  result = (int) ((arg1)->first);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_PairIntString_second_set_ccapi_00042a34e9364138(std::pair< int,std::string > *_swig_go_0, _gostring_ _swig_go_1) {
  std::pair< int,std::string > *arg1 = (std::pair< int,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(std::pair< int,std::string > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->second = *arg2;
  
}


_gostring_ _wrap_PairIntString_second_get_ccapi_00042a34e9364138(std::pair< int,std::string > *_swig_go_0) {
  std::pair< int,std::string > *arg1 = (std::pair< int,std::string > *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(std::pair< int,std::string > **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->second);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_delete_PairIntString_ccapi_00042a34e9364138(std::pair< int,std::string > *_swig_go_0) {
  std::pair< int,std::string > *arg1 = (std::pair< int,std::string > *) 0 ;
  
  arg1 = *(std::pair< int,std::string > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


std::pair< long long,long long > *_wrap_new_PairLongLongLongLong__SWIG_0_ccapi_00042a34e9364138() {
  std::pair< long long,long long > *result = 0 ;
  std::pair< long long,long long > *_swig_go_result;
  
  
  {
    try {
      result = (std::pair< long long,long long > *)new std::pair< long long,long long >();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::pair< long long,long long > **)&_swig_go_result = (std::pair< long long,long long > *)result; 
  return _swig_go_result;
}


std::pair< long long,long long > *_wrap_new_PairLongLongLongLong__SWIG_1_ccapi_00042a34e9364138(long long _swig_go_0, long long _swig_go_1) {
  long long arg1 ;
  long long arg2 ;
  std::pair< long long,long long > *result = 0 ;
  std::pair< long long,long long > *_swig_go_result;
  
  arg1 = (long long)_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  
  {
    try {
      result = (std::pair< long long,long long > *)new std::pair< long long,long long >(arg1,arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::pair< long long,long long > **)&_swig_go_result = (std::pair< long long,long long > *)result; 
  return _swig_go_result;
}


std::pair< long long,long long > *_wrap_new_PairLongLongLongLong__SWIG_2_ccapi_00042a34e9364138(std::pair< long long,long long > *_swig_go_0) {
  std::pair< long long,long long > *arg1 = 0 ;
  std::pair< long long,long long > *result = 0 ;
  std::pair< long long,long long > *_swig_go_result;
  
  arg1 = *(std::pair< long long,long long > **)&_swig_go_0; 
  
  {
    try {
      result = (std::pair< long long,long long > *)new std::pair< long long,long long >((std::pair< long long,long long > const &)*arg1);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::pair< long long,long long > **)&_swig_go_result = (std::pair< long long,long long > *)result; 
  return _swig_go_result;
}


void _wrap_PairLongLongLongLong_first_set_ccapi_00042a34e9364138(std::pair< long long,long long > *_swig_go_0, long long _swig_go_1) {
  std::pair< long long,long long > *arg1 = (std::pair< long long,long long > *) 0 ;
  long long arg2 ;
  
  arg1 = *(std::pair< long long,long long > **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  
  if (arg1) (arg1)->first = arg2;
  
}


long long _wrap_PairLongLongLongLong_first_get_ccapi_00042a34e9364138(std::pair< long long,long long > *_swig_go_0) {
  std::pair< long long,long long > *arg1 = (std::pair< long long,long long > *) 0 ;
  long long result;
  long long _swig_go_result;
  
  arg1 = *(std::pair< long long,long long > **)&_swig_go_0; 
  
  result = (long long) ((arg1)->first);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_PairLongLongLongLong_second_set_ccapi_00042a34e9364138(std::pair< long long,long long > *_swig_go_0, long long _swig_go_1) {
  std::pair< long long,long long > *arg1 = (std::pair< long long,long long > *) 0 ;
  long long arg2 ;
  
  arg1 = *(std::pair< long long,long long > **)&_swig_go_0; 
  arg2 = (long long)_swig_go_1; 
  
  if (arg1) (arg1)->second = arg2;
  
}


long long _wrap_PairLongLongLongLong_second_get_ccapi_00042a34e9364138(std::pair< long long,long long > *_swig_go_0) {
  std::pair< long long,long long > *arg1 = (std::pair< long long,long long > *) 0 ;
  long long result;
  long long _swig_go_result;
  
  arg1 = *(std::pair< long long,long long > **)&_swig_go_0; 
  
  result = (long long) ((arg1)->second);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_PairLongLongLongLong_ccapi_00042a34e9364138(std::pair< long long,long long > *_swig_go_0) {
  std::pair< long long,long long > *arg1 = (std::pair< long long,long long > *) 0 ;
  
  arg1 = *(std::pair< long long,long long > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


std::vector< std::pair< int,std::string > > *_wrap_new_VectorPairIntString__SWIG_0_ccapi_00042a34e9364138() {
  std::vector< std::pair< int,std::string > > *result = 0 ;
  std::vector< std::pair< int,std::string > > *_swig_go_result;
  
  
  {
    try {
      result = (std::vector< std::pair< int,std::string > > *)new std::vector< std::pair< int,std::string > >();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::vector< std::pair< int,std::string > > **)&_swig_go_result = (std::vector< std::pair< int,std::string > > *)result; 
  return _swig_go_result;
}


std::vector< std::pair< int,std::string > > *_wrap_new_VectorPairIntString__SWIG_1_ccapi_00042a34e9364138(long long _swig_go_0) {
  std::vector< std::pair< int,std::string > >::size_type arg1 ;
  std::vector< std::pair< int,std::string > > *result = 0 ;
  std::vector< std::pair< int,std::string > > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  {
    try {
      result = (std::vector< std::pair< int,std::string > > *)new std::vector< std::pair< int,std::string > >(SWIG_STD_MOVE(arg1));
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::vector< std::pair< int,std::string > > **)&_swig_go_result = (std::vector< std::pair< int,std::string > > *)result; 
  return _swig_go_result;
}


std::vector< std::pair< int,std::string > > *_wrap_new_VectorPairIntString__SWIG_2_ccapi_00042a34e9364138(std::vector< std::pair< int,std::string > > *_swig_go_0) {
  std::vector< std::pair< int,std::string > > *arg1 = 0 ;
  std::vector< std::pair< int,std::string > > *result = 0 ;
  std::vector< std::pair< int,std::string > > *_swig_go_result;
  
  arg1 = *(std::vector< std::pair< int,std::string > > **)&_swig_go_0; 
  
  {
    try {
      result = (std::vector< std::pair< int,std::string > > *)new std::vector< std::pair< int,std::string > >((std::vector< std::pair< int,std::string > > const &)*arg1);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::vector< std::pair< int,std::string > > **)&_swig_go_result = (std::vector< std::pair< int,std::string > > *)result; 
  return _swig_go_result;
}


long long _wrap_VectorPairIntString_size_ccapi_00042a34e9364138(std::vector< std::pair< int,std::string > > *_swig_go_0) {
  std::vector< std::pair< int,std::string > > *arg1 = (std::vector< std::pair< int,std::string > > *) 0 ;
  std::vector< std::pair< int,std::string > >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::pair< int,std::string > > **)&_swig_go_0; 
  
  {
    try {
      result = ((std::vector< std::pair< int,std::string > > const *)arg1)->size();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_VectorPairIntString_capacity_ccapi_00042a34e9364138(std::vector< std::pair< int,std::string > > *_swig_go_0) {
  std::vector< std::pair< int,std::string > > *arg1 = (std::vector< std::pair< int,std::string > > *) 0 ;
  std::vector< std::pair< int,std::string > >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::pair< int,std::string > > **)&_swig_go_0; 
  
  {
    try {
      result = ((std::vector< std::pair< int,std::string > > const *)arg1)->capacity();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_VectorPairIntString_reserve_ccapi_00042a34e9364138(std::vector< std::pair< int,std::string > > *_swig_go_0, long long _swig_go_1) {
  std::vector< std::pair< int,std::string > > *arg1 = (std::vector< std::pair< int,std::string > > *) 0 ;
  std::vector< std::pair< int,std::string > >::size_type arg2 ;
  
  arg1 = *(std::vector< std::pair< int,std::string > > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  {
    try {
      (arg1)->reserve(SWIG_STD_MOVE(arg2));
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


bool _wrap_VectorPairIntString_isEmpty_ccapi_00042a34e9364138(std::vector< std::pair< int,std::string > > *_swig_go_0) {
  std::vector< std::pair< int,std::string > > *arg1 = (std::vector< std::pair< int,std::string > > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< std::pair< int,std::string > > **)&_swig_go_0; 
  
  {
    try {
      result = (bool)((std::vector< std::pair< int,std::string > > const *)arg1)->empty();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_VectorPairIntString_clear_ccapi_00042a34e9364138(std::vector< std::pair< int,std::string > > *_swig_go_0) {
  std::vector< std::pair< int,std::string > > *arg1 = (std::vector< std::pair< int,std::string > > *) 0 ;
  
  arg1 = *(std::vector< std::pair< int,std::string > > **)&_swig_go_0; 
  
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_VectorPairIntString_add_ccapi_00042a34e9364138(std::vector< std::pair< int,std::string > > *_swig_go_0, std::pair< int,std::string > *_swig_go_1) {
  std::vector< std::pair< int,std::string > > *arg1 = (std::vector< std::pair< int,std::string > > *) 0 ;
  std::vector< std::pair< int,std::string > >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< std::pair< int,std::string > > **)&_swig_go_0; 
  arg2 = *(std::vector< std::pair< int,std::string > >::value_type **)&_swig_go_1; 
  
  {
    try {
      (arg1)->push_back((std::vector< std::pair< int,std::string > >::value_type const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


std::pair< int,std::string > *_wrap_VectorPairIntString_get_ccapi_00042a34e9364138(std::vector< std::pair< int,std::string > > *_swig_go_0, intgo _swig_go_1) {
  std::vector< std::pair< int,std::string > > *arg1 = (std::vector< std::pair< int,std::string > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< int,std::string > >::value_type *result = 0 ;
  std::pair< int,std::string > *_swig_go_result;
  
  arg1 = *(std::vector< std::pair< int,std::string > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  {
    try {
      try {
        result = (std::vector< std::pair< int,std::string > >::value_type *) &std_vector_Sl_std_pair_Sl_int_Sc_std_string_Sg__Sg__get(arg1,arg2);
      } catch(std::out_of_range &_e) {
        _swig_gopanic((&_e)->what());
      }
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::vector< std::pair< int,std::string > >::value_type **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_VectorPairIntString_set_ccapi_00042a34e9364138(std::vector< std::pair< int,std::string > > *_swig_go_0, intgo _swig_go_1, std::pair< int,std::string > *_swig_go_2) {
  std::vector< std::pair< int,std::string > > *arg1 = (std::vector< std::pair< int,std::string > > *) 0 ;
  int arg2 ;
  std::vector< std::pair< int,std::string > >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< std::pair< int,std::string > > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(std::vector< std::pair< int,std::string > >::value_type **)&_swig_go_2; 
  
  {
    try {
      try {
        std_vector_Sl_std_pair_Sl_int_Sc_std_string_Sg__Sg__set(arg1,arg2,(std::pair< int,std::string > const &)*arg3);
      } catch(std::out_of_range &_e) {
        _swig_gopanic((&_e)->what());
      }
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_delete_VectorPairIntString_ccapi_00042a34e9364138(std::vector< std::pair< int,std::string > > *_swig_go_0) {
  std::vector< std::pair< int,std::string > > *arg1 = (std::vector< std::pair< int,std::string > > *) 0 ;
  
  arg1 = *(std::vector< std::pair< int,std::string > > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


std::vector< ccapi::Element > *_wrap_new_ElementList__SWIG_0_ccapi_00042a34e9364138() {
  std::vector< ccapi::Element > *result = 0 ;
  std::vector< ccapi::Element > *_swig_go_result;
  
  
  {
    try {
      result = (std::vector< ccapi::Element > *)new std::vector< ccapi::Element >();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::vector< ccapi::Element > **)&_swig_go_result = (std::vector< ccapi::Element > *)result; 
  return _swig_go_result;
}


std::vector< ccapi::Element > *_wrap_new_ElementList__SWIG_1_ccapi_00042a34e9364138(long long _swig_go_0) {
  std::vector< ccapi::Element >::size_type arg1 ;
  std::vector< ccapi::Element > *result = 0 ;
  std::vector< ccapi::Element > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  {
    try {
      result = (std::vector< ccapi::Element > *)new std::vector< ccapi::Element >(SWIG_STD_MOVE(arg1));
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::vector< ccapi::Element > **)&_swig_go_result = (std::vector< ccapi::Element > *)result; 
  return _swig_go_result;
}


std::vector< ccapi::Element > *_wrap_new_ElementList__SWIG_2_ccapi_00042a34e9364138(std::vector< ccapi::Element > *_swig_go_0) {
  std::vector< ccapi::Element > *arg1 = 0 ;
  std::vector< ccapi::Element > *result = 0 ;
  std::vector< ccapi::Element > *_swig_go_result;
  
  arg1 = *(std::vector< ccapi::Element > **)&_swig_go_0; 
  
  {
    try {
      result = (std::vector< ccapi::Element > *)new std::vector< ccapi::Element >((std::vector< ccapi::Element > const &)*arg1);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::vector< ccapi::Element > **)&_swig_go_result = (std::vector< ccapi::Element > *)result; 
  return _swig_go_result;
}


long long _wrap_ElementList_size_ccapi_00042a34e9364138(std::vector< ccapi::Element > *_swig_go_0) {
  std::vector< ccapi::Element > *arg1 = (std::vector< ccapi::Element > *) 0 ;
  std::vector< ccapi::Element >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< ccapi::Element > **)&_swig_go_0; 
  
  {
    try {
      result = ((std::vector< ccapi::Element > const *)arg1)->size();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_ElementList_capacity_ccapi_00042a34e9364138(std::vector< ccapi::Element > *_swig_go_0) {
  std::vector< ccapi::Element > *arg1 = (std::vector< ccapi::Element > *) 0 ;
  std::vector< ccapi::Element >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< ccapi::Element > **)&_swig_go_0; 
  
  {
    try {
      result = ((std::vector< ccapi::Element > const *)arg1)->capacity();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ElementList_reserve_ccapi_00042a34e9364138(std::vector< ccapi::Element > *_swig_go_0, long long _swig_go_1) {
  std::vector< ccapi::Element > *arg1 = (std::vector< ccapi::Element > *) 0 ;
  std::vector< ccapi::Element >::size_type arg2 ;
  
  arg1 = *(std::vector< ccapi::Element > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  {
    try {
      (arg1)->reserve(SWIG_STD_MOVE(arg2));
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


bool _wrap_ElementList_isEmpty_ccapi_00042a34e9364138(std::vector< ccapi::Element > *_swig_go_0) {
  std::vector< ccapi::Element > *arg1 = (std::vector< ccapi::Element > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< ccapi::Element > **)&_swig_go_0; 
  
  {
    try {
      result = (bool)((std::vector< ccapi::Element > const *)arg1)->empty();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ElementList_clear_ccapi_00042a34e9364138(std::vector< ccapi::Element > *_swig_go_0) {
  std::vector< ccapi::Element > *arg1 = (std::vector< ccapi::Element > *) 0 ;
  
  arg1 = *(std::vector< ccapi::Element > **)&_swig_go_0; 
  
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_ElementList_add_ccapi_00042a34e9364138(std::vector< ccapi::Element > *_swig_go_0, ccapi::Element *_swig_go_1) {
  std::vector< ccapi::Element > *arg1 = (std::vector< ccapi::Element > *) 0 ;
  std::vector< ccapi::Element >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< ccapi::Element > **)&_swig_go_0; 
  arg2 = *(std::vector< ccapi::Element >::value_type **)&_swig_go_1; 
  
  {
    try {
      (arg1)->push_back((std::vector< ccapi::Element >::value_type const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


ccapi::Element *_wrap_ElementList_get_ccapi_00042a34e9364138(std::vector< ccapi::Element > *_swig_go_0, intgo _swig_go_1) {
  std::vector< ccapi::Element > *arg1 = (std::vector< ccapi::Element > *) 0 ;
  int arg2 ;
  std::vector< ccapi::Element >::value_type *result = 0 ;
  ccapi::Element *_swig_go_result;
  
  arg1 = *(std::vector< ccapi::Element > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  {
    try {
      try {
        result = (std::vector< ccapi::Element >::value_type *) &std_vector_Sl_ccapi_Element_Sg__get(arg1,arg2);
      } catch(std::out_of_range &_e) {
        _swig_gopanic((&_e)->what());
      }
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::vector< ccapi::Element >::value_type **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_ElementList_set_ccapi_00042a34e9364138(std::vector< ccapi::Element > *_swig_go_0, intgo _swig_go_1, ccapi::Element *_swig_go_2) {
  std::vector< ccapi::Element > *arg1 = (std::vector< ccapi::Element > *) 0 ;
  int arg2 ;
  std::vector< ccapi::Element >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< ccapi::Element > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(std::vector< ccapi::Element >::value_type **)&_swig_go_2; 
  
  {
    try {
      try {
        std_vector_Sl_ccapi_Element_Sg__set(arg1,arg2,(ccapi::Element const &)*arg3);
      } catch(std::out_of_range &_e) {
        _swig_gopanic((&_e)->what());
      }
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_delete_ElementList_ccapi_00042a34e9364138(std::vector< ccapi::Element > *_swig_go_0) {
  std::vector< ccapi::Element > *arg1 = (std::vector< ccapi::Element > *) 0 ;
  
  arg1 = *(std::vector< ccapi::Element > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


std::vector< std::string > *_wrap_new_VectorString__SWIG_0_ccapi_00042a34e9364138() {
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *_swig_go_result;
  
  
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::vector< std::string > **)&_swig_go_result = (std::vector< std::string > *)result; 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_new_VectorString__SWIG_1_ccapi_00042a34e9364138(long long _swig_go_0) {
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >(SWIG_STD_MOVE(arg1));
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::vector< std::string > **)&_swig_go_result = (std::vector< std::string > *)result; 
  return _swig_go_result;
}


std::vector< std::string > *_wrap_new_VectorString__SWIG_2_ccapi_00042a34e9364138(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  {
    try {
      result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::vector< std::string > **)&_swig_go_result = (std::vector< std::string > *)result; 
  return _swig_go_result;
}


long long _wrap_VectorString_size_ccapi_00042a34e9364138(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->size();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_VectorString_capacity_ccapi_00042a34e9364138(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  {
    try {
      result = ((std::vector< std::string > const *)arg1)->capacity();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_VectorString_reserve_ccapi_00042a34e9364138(std::vector< std::string > *_swig_go_0, long long _swig_go_1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  {
    try {
      (arg1)->reserve(SWIG_STD_MOVE(arg2));
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


bool _wrap_VectorString_isEmpty_ccapi_00042a34e9364138(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  {
    try {
      result = (bool)((std::vector< std::string > const *)arg1)->empty();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_VectorString_clear_ccapi_00042a34e9364138(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_VectorString_add_ccapi_00042a34e9364138(std::vector< std::string > *_swig_go_0, _gostring_ _swig_go_1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  std::vector< std::string >::value_type arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


_gostring_ _wrap_VectorString_get_ccapi_00042a34e9364138(std::vector< std::string > *_swig_go_0, intgo _swig_go_1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  {
    try {
      try {
        result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
      } catch(std::out_of_range &_e) {
        _swig_gopanic((&_e)->what());
      }
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_VectorString_set_ccapi_00042a34e9364138(std::vector< std::string > *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  std::vector< std::string >::value_type arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      try {
        std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
      } catch(std::out_of_range &_e) {
        _swig_gopanic((&_e)->what());
      }
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_delete_VectorString_ccapi_00042a34e9364138(std::vector< std::string > *_swig_go_0) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = *(std::vector< std::string > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


std::vector< ccapi::Message > *_wrap_new_MessageList__SWIG_0_ccapi_00042a34e9364138() {
  std::vector< ccapi::Message > *result = 0 ;
  std::vector< ccapi::Message > *_swig_go_result;
  
  
  {
    try {
      result = (std::vector< ccapi::Message > *)new std::vector< ccapi::Message >();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::vector< ccapi::Message > **)&_swig_go_result = (std::vector< ccapi::Message > *)result; 
  return _swig_go_result;
}


std::vector< ccapi::Message > *_wrap_new_MessageList__SWIG_1_ccapi_00042a34e9364138(long long _swig_go_0) {
  std::vector< ccapi::Message >::size_type arg1 ;
  std::vector< ccapi::Message > *result = 0 ;
  std::vector< ccapi::Message > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  {
    try {
      result = (std::vector< ccapi::Message > *)new std::vector< ccapi::Message >(SWIG_STD_MOVE(arg1));
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::vector< ccapi::Message > **)&_swig_go_result = (std::vector< ccapi::Message > *)result; 
  return _swig_go_result;
}


std::vector< ccapi::Message > *_wrap_new_MessageList__SWIG_2_ccapi_00042a34e9364138(std::vector< ccapi::Message > *_swig_go_0) {
  std::vector< ccapi::Message > *arg1 = 0 ;
  std::vector< ccapi::Message > *result = 0 ;
  std::vector< ccapi::Message > *_swig_go_result;
  
  arg1 = *(std::vector< ccapi::Message > **)&_swig_go_0; 
  
  {
    try {
      result = (std::vector< ccapi::Message > *)new std::vector< ccapi::Message >((std::vector< ccapi::Message > const &)*arg1);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::vector< ccapi::Message > **)&_swig_go_result = (std::vector< ccapi::Message > *)result; 
  return _swig_go_result;
}


long long _wrap_MessageList_size_ccapi_00042a34e9364138(std::vector< ccapi::Message > *_swig_go_0) {
  std::vector< ccapi::Message > *arg1 = (std::vector< ccapi::Message > *) 0 ;
  std::vector< ccapi::Message >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< ccapi::Message > **)&_swig_go_0; 
  
  {
    try {
      result = ((std::vector< ccapi::Message > const *)arg1)->size();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_MessageList_capacity_ccapi_00042a34e9364138(std::vector< ccapi::Message > *_swig_go_0) {
  std::vector< ccapi::Message > *arg1 = (std::vector< ccapi::Message > *) 0 ;
  std::vector< ccapi::Message >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< ccapi::Message > **)&_swig_go_0; 
  
  {
    try {
      result = ((std::vector< ccapi::Message > const *)arg1)->capacity();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_MessageList_reserve_ccapi_00042a34e9364138(std::vector< ccapi::Message > *_swig_go_0, long long _swig_go_1) {
  std::vector< ccapi::Message > *arg1 = (std::vector< ccapi::Message > *) 0 ;
  std::vector< ccapi::Message >::size_type arg2 ;
  
  arg1 = *(std::vector< ccapi::Message > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  {
    try {
      (arg1)->reserve(SWIG_STD_MOVE(arg2));
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


bool _wrap_MessageList_isEmpty_ccapi_00042a34e9364138(std::vector< ccapi::Message > *_swig_go_0) {
  std::vector< ccapi::Message > *arg1 = (std::vector< ccapi::Message > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< ccapi::Message > **)&_swig_go_0; 
  
  {
    try {
      result = (bool)((std::vector< ccapi::Message > const *)arg1)->empty();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_MessageList_clear_ccapi_00042a34e9364138(std::vector< ccapi::Message > *_swig_go_0) {
  std::vector< ccapi::Message > *arg1 = (std::vector< ccapi::Message > *) 0 ;
  
  arg1 = *(std::vector< ccapi::Message > **)&_swig_go_0; 
  
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_MessageList_add_ccapi_00042a34e9364138(std::vector< ccapi::Message > *_swig_go_0, ccapi::Message *_swig_go_1) {
  std::vector< ccapi::Message > *arg1 = (std::vector< ccapi::Message > *) 0 ;
  std::vector< ccapi::Message >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< ccapi::Message > **)&_swig_go_0; 
  arg2 = *(std::vector< ccapi::Message >::value_type **)&_swig_go_1; 
  
  {
    try {
      (arg1)->push_back((std::vector< ccapi::Message >::value_type const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


ccapi::Message *_wrap_MessageList_get_ccapi_00042a34e9364138(std::vector< ccapi::Message > *_swig_go_0, intgo _swig_go_1) {
  std::vector< ccapi::Message > *arg1 = (std::vector< ccapi::Message > *) 0 ;
  int arg2 ;
  std::vector< ccapi::Message >::value_type *result = 0 ;
  ccapi::Message *_swig_go_result;
  
  arg1 = *(std::vector< ccapi::Message > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  {
    try {
      try {
        result = (std::vector< ccapi::Message >::value_type *) &std_vector_Sl_ccapi_Message_Sg__get(arg1,arg2);
      } catch(std::out_of_range &_e) {
        _swig_gopanic((&_e)->what());
      }
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::vector< ccapi::Message >::value_type **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_MessageList_set_ccapi_00042a34e9364138(std::vector< ccapi::Message > *_swig_go_0, intgo _swig_go_1, ccapi::Message *_swig_go_2) {
  std::vector< ccapi::Message > *arg1 = (std::vector< ccapi::Message > *) 0 ;
  int arg2 ;
  std::vector< ccapi::Message >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< ccapi::Message > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(std::vector< ccapi::Message >::value_type **)&_swig_go_2; 
  
  {
    try {
      try {
        std_vector_Sl_ccapi_Message_Sg__set(arg1,arg2,(ccapi::Message const &)*arg3);
      } catch(std::out_of_range &_e) {
        _swig_gopanic((&_e)->what());
      }
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_delete_MessageList_ccapi_00042a34e9364138(std::vector< ccapi::Message > *_swig_go_0) {
  std::vector< ccapi::Message > *arg1 = (std::vector< ccapi::Message > *) 0 ;
  
  arg1 = *(std::vector< ccapi::Message > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


std::map< std::string,std::map< std::string,std::string > > *_wrap_new_MapStringMapStringString__SWIG_0_ccapi_00042a34e9364138() {
  std::map< std::string,std::map< std::string,std::string > > *result = 0 ;
  std::map< std::string,std::map< std::string,std::string > > *_swig_go_result;
  
  
  {
    try {
      result = (std::map< std::string,std::map< std::string,std::string > > *)new std::map< std::string,std::map< std::string,std::string > >();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::map< std::string,std::map< std::string,std::string > > **)&_swig_go_result = (std::map< std::string,std::map< std::string,std::string > > *)result; 
  return _swig_go_result;
}


std::map< std::string,std::map< std::string,std::string > > *_wrap_new_MapStringMapStringString__SWIG_1_ccapi_00042a34e9364138(std::map< std::string,std::map< std::string,std::string,std::less< std::string > > > *_swig_go_0) {
  std::map< std::string,std::map< std::string,std::string,std::less< std::string > > > *arg1 = 0 ;
  std::map< std::string,std::map< std::string,std::string > > *result = 0 ;
  std::map< std::string,std::map< std::string,std::string > > *_swig_go_result;
  
  arg1 = *(std::map< std::string,std::map< std::string,std::string,std::less< std::string > > > **)&_swig_go_0; 
  
  {
    try {
      result = (std::map< std::string,std::map< std::string,std::string > > *)new std::map< std::string,std::map< std::string,std::string > >((std::map< std::string,std::map< std::string,std::string,std::less< std::string > > > const &)*arg1);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::map< std::string,std::map< std::string,std::string > > **)&_swig_go_result = (std::map< std::string,std::map< std::string,std::string > > *)result; 
  return _swig_go_result;
}


intgo _wrap_MapStringMapStringString_size_ccapi_00042a34e9364138(std::map< std::string,std::map< std::string,std::string > > *_swig_go_0) {
  std::map< std::string,std::map< std::string,std::string > > *arg1 = (std::map< std::string,std::map< std::string,std::string > > *) 0 ;
  unsigned int result;
  intgo _swig_go_result;
  
  arg1 = *(std::map< std::string,std::map< std::string,std::string > > **)&_swig_go_0; 
  
  {
    try {
      result = (unsigned int)((std::map< std::string,std::map< std::string,std::string > > const *)arg1)->size();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_MapStringMapStringString_empty_ccapi_00042a34e9364138(std::map< std::string,std::map< std::string,std::string > > *_swig_go_0) {
  std::map< std::string,std::map< std::string,std::string > > *arg1 = (std::map< std::string,std::map< std::string,std::string > > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::map< std::string,std::map< std::string,std::string > > **)&_swig_go_0; 
  
  {
    try {
      result = (bool)((std::map< std::string,std::map< std::string,std::string > > const *)arg1)->empty();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_MapStringMapStringString_clear_ccapi_00042a34e9364138(std::map< std::string,std::map< std::string,std::string > > *_swig_go_0) {
  std::map< std::string,std::map< std::string,std::string > > *arg1 = (std::map< std::string,std::map< std::string,std::string > > *) 0 ;
  
  arg1 = *(std::map< std::string,std::map< std::string,std::string > > **)&_swig_go_0; 
  
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


std::map< std::string,std::string,std::less< std::string > > *_wrap_MapStringMapStringString_get_ccapi_00042a34e9364138(std::map< std::string,std::map< std::string,std::string > > *_swig_go_0, _gostring_ _swig_go_1) {
  std::map< std::string,std::map< std::string,std::string > > *arg1 = (std::map< std::string,std::map< std::string,std::string > > *) 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *result = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(std::map< std::string,std::map< std::string,std::string > > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      try {
        result = (std::map< std::string,std::string,std::less< std::string > > *) &std_map_Sl_std_string_Sc_std_map_Sl_std_string_Sc_std_string_Sg__Sg__get(arg1,(std::string const &)*arg2);
      } catch(std::out_of_range &_e) {
        _swig_gopanic((&_e)->what());
      }
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_MapStringMapStringString_set_ccapi_00042a34e9364138(std::map< std::string,std::map< std::string,std::string > > *_swig_go_0, _gostring_ _swig_go_1, std::map< std::string,std::string,std::less< std::string > > *_swig_go_2) {
  std::map< std::string,std::map< std::string,std::string > > *arg1 = (std::map< std::string,std::map< std::string,std::string > > *) 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg3 = 0 ;
  
  arg1 = *(std::map< std::string,std::map< std::string,std::string > > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  arg3 = *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_2; 
  
  {
    try {
      std_map_Sl_std_string_Sc_std_map_Sl_std_string_Sc_std_string_Sg__Sg__set(arg1,(std::string const &)*arg2,(std::map< std::string,std::string,std::less< std::string > > const &)*arg3);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_MapStringMapStringString_del_ccapi_00042a34e9364138(std::map< std::string,std::map< std::string,std::string > > *_swig_go_0, _gostring_ _swig_go_1) {
  std::map< std::string,std::map< std::string,std::string > > *arg1 = (std::map< std::string,std::map< std::string,std::string > > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(std::map< std::string,std::map< std::string,std::string > > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      try {
        std_map_Sl_std_string_Sc_std_map_Sl_std_string_Sc_std_string_Sg__Sg__del(arg1,(std::string const &)*arg2);
      } catch(std::out_of_range &_e) {
        _swig_gopanic((&_e)->what());
      }
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


bool _wrap_MapStringMapStringString_has_key_ccapi_00042a34e9364138(std::map< std::string,std::map< std::string,std::string > > *_swig_go_0, _gostring_ _swig_go_1) {
  std::map< std::string,std::map< std::string,std::string > > *arg1 = (std::map< std::string,std::map< std::string,std::string > > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::map< std::string,std::map< std::string,std::string > > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (bool)std_map_Sl_std_string_Sc_std_map_Sl_std_string_Sc_std_string_Sg__Sg__has_key(arg1,(std::string const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_MapStringMapStringString_ccapi_00042a34e9364138(std::map< std::string,std::map< std::string,std::string > > *_swig_go_0) {
  std::map< std::string,std::map< std::string,std::string > > *arg1 = (std::map< std::string,std::map< std::string,std::string > > *) 0 ;
  
  arg1 = *(std::map< std::string,std::map< std::string,std::string > > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


std::vector< ccapi::Event > *_wrap_new_EventList__SWIG_0_ccapi_00042a34e9364138() {
  std::vector< ccapi::Event > *result = 0 ;
  std::vector< ccapi::Event > *_swig_go_result;
  
  
  {
    try {
      result = (std::vector< ccapi::Event > *)new std::vector< ccapi::Event >();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::vector< ccapi::Event > **)&_swig_go_result = (std::vector< ccapi::Event > *)result; 
  return _swig_go_result;
}


std::vector< ccapi::Event > *_wrap_new_EventList__SWIG_1_ccapi_00042a34e9364138(long long _swig_go_0) {
  std::vector< ccapi::Event >::size_type arg1 ;
  std::vector< ccapi::Event > *result = 0 ;
  std::vector< ccapi::Event > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  {
    try {
      result = (std::vector< ccapi::Event > *)new std::vector< ccapi::Event >(SWIG_STD_MOVE(arg1));
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::vector< ccapi::Event > **)&_swig_go_result = (std::vector< ccapi::Event > *)result; 
  return _swig_go_result;
}


std::vector< ccapi::Event > *_wrap_new_EventList__SWIG_2_ccapi_00042a34e9364138(std::vector< ccapi::Event > *_swig_go_0) {
  std::vector< ccapi::Event > *arg1 = 0 ;
  std::vector< ccapi::Event > *result = 0 ;
  std::vector< ccapi::Event > *_swig_go_result;
  
  arg1 = *(std::vector< ccapi::Event > **)&_swig_go_0; 
  
  {
    try {
      result = (std::vector< ccapi::Event > *)new std::vector< ccapi::Event >((std::vector< ccapi::Event > const &)*arg1);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::vector< ccapi::Event > **)&_swig_go_result = (std::vector< ccapi::Event > *)result; 
  return _swig_go_result;
}


long long _wrap_EventList_size_ccapi_00042a34e9364138(std::vector< ccapi::Event > *_swig_go_0) {
  std::vector< ccapi::Event > *arg1 = (std::vector< ccapi::Event > *) 0 ;
  std::vector< ccapi::Event >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< ccapi::Event > **)&_swig_go_0; 
  
  {
    try {
      result = ((std::vector< ccapi::Event > const *)arg1)->size();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_EventList_capacity_ccapi_00042a34e9364138(std::vector< ccapi::Event > *_swig_go_0) {
  std::vector< ccapi::Event > *arg1 = (std::vector< ccapi::Event > *) 0 ;
  std::vector< ccapi::Event >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< ccapi::Event > **)&_swig_go_0; 
  
  {
    try {
      result = ((std::vector< ccapi::Event > const *)arg1)->capacity();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_EventList_reserve_ccapi_00042a34e9364138(std::vector< ccapi::Event > *_swig_go_0, long long _swig_go_1) {
  std::vector< ccapi::Event > *arg1 = (std::vector< ccapi::Event > *) 0 ;
  std::vector< ccapi::Event >::size_type arg2 ;
  
  arg1 = *(std::vector< ccapi::Event > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  {
    try {
      (arg1)->reserve(SWIG_STD_MOVE(arg2));
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


bool _wrap_EventList_isEmpty_ccapi_00042a34e9364138(std::vector< ccapi::Event > *_swig_go_0) {
  std::vector< ccapi::Event > *arg1 = (std::vector< ccapi::Event > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< ccapi::Event > **)&_swig_go_0; 
  
  {
    try {
      result = (bool)((std::vector< ccapi::Event > const *)arg1)->empty();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_EventList_clear_ccapi_00042a34e9364138(std::vector< ccapi::Event > *_swig_go_0) {
  std::vector< ccapi::Event > *arg1 = (std::vector< ccapi::Event > *) 0 ;
  
  arg1 = *(std::vector< ccapi::Event > **)&_swig_go_0; 
  
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_EventList_add_ccapi_00042a34e9364138(std::vector< ccapi::Event > *_swig_go_0, ccapi::Event *_swig_go_1) {
  std::vector< ccapi::Event > *arg1 = (std::vector< ccapi::Event > *) 0 ;
  std::vector< ccapi::Event >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< ccapi::Event > **)&_swig_go_0; 
  arg2 = *(std::vector< ccapi::Event >::value_type **)&_swig_go_1; 
  
  {
    try {
      (arg1)->push_back((std::vector< ccapi::Event >::value_type const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


ccapi::Event *_wrap_EventList_get_ccapi_00042a34e9364138(std::vector< ccapi::Event > *_swig_go_0, intgo _swig_go_1) {
  std::vector< ccapi::Event > *arg1 = (std::vector< ccapi::Event > *) 0 ;
  int arg2 ;
  std::vector< ccapi::Event >::value_type *result = 0 ;
  ccapi::Event *_swig_go_result;
  
  arg1 = *(std::vector< ccapi::Event > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  {
    try {
      try {
        result = (std::vector< ccapi::Event >::value_type *) &std_vector_Sl_ccapi_Event_Sg__get(arg1,arg2);
      } catch(std::out_of_range &_e) {
        _swig_gopanic((&_e)->what());
      }
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::vector< ccapi::Event >::value_type **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_EventList_set_ccapi_00042a34e9364138(std::vector< ccapi::Event > *_swig_go_0, intgo _swig_go_1, ccapi::Event *_swig_go_2) {
  std::vector< ccapi::Event > *arg1 = (std::vector< ccapi::Event > *) 0 ;
  int arg2 ;
  std::vector< ccapi::Event >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< ccapi::Event > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(std::vector< ccapi::Event >::value_type **)&_swig_go_2; 
  
  {
    try {
      try {
        std_vector_Sl_ccapi_Event_Sg__set(arg1,arg2,(ccapi::Event const &)*arg3);
      } catch(std::out_of_range &_e) {
        _swig_gopanic((&_e)->what());
      }
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_delete_EventList_ccapi_00042a34e9364138(std::vector< ccapi::Event > *_swig_go_0) {
  std::vector< ccapi::Event > *arg1 = (std::vector< ccapi::Event > *) 0 ;
  
  arg1 = *(std::vector< ccapi::Event > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


std::vector< ccapi::Subscription > *_wrap_new_SubscriptionList__SWIG_0_ccapi_00042a34e9364138() {
  std::vector< ccapi::Subscription > *result = 0 ;
  std::vector< ccapi::Subscription > *_swig_go_result;
  
  
  {
    try {
      result = (std::vector< ccapi::Subscription > *)new std::vector< ccapi::Subscription >();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::vector< ccapi::Subscription > **)&_swig_go_result = (std::vector< ccapi::Subscription > *)result; 
  return _swig_go_result;
}


std::vector< ccapi::Subscription > *_wrap_new_SubscriptionList__SWIG_1_ccapi_00042a34e9364138(long long _swig_go_0) {
  std::vector< ccapi::Subscription >::size_type arg1 ;
  std::vector< ccapi::Subscription > *result = 0 ;
  std::vector< ccapi::Subscription > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  {
    try {
      result = (std::vector< ccapi::Subscription > *)new std::vector< ccapi::Subscription >(SWIG_STD_MOVE(arg1));
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::vector< ccapi::Subscription > **)&_swig_go_result = (std::vector< ccapi::Subscription > *)result; 
  return _swig_go_result;
}


std::vector< ccapi::Subscription > *_wrap_new_SubscriptionList__SWIG_2_ccapi_00042a34e9364138(std::vector< ccapi::Subscription > *_swig_go_0) {
  std::vector< ccapi::Subscription > *arg1 = 0 ;
  std::vector< ccapi::Subscription > *result = 0 ;
  std::vector< ccapi::Subscription > *_swig_go_result;
  
  arg1 = *(std::vector< ccapi::Subscription > **)&_swig_go_0; 
  
  {
    try {
      result = (std::vector< ccapi::Subscription > *)new std::vector< ccapi::Subscription >((std::vector< ccapi::Subscription > const &)*arg1);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::vector< ccapi::Subscription > **)&_swig_go_result = (std::vector< ccapi::Subscription > *)result; 
  return _swig_go_result;
}


long long _wrap_SubscriptionList_size_ccapi_00042a34e9364138(std::vector< ccapi::Subscription > *_swig_go_0) {
  std::vector< ccapi::Subscription > *arg1 = (std::vector< ccapi::Subscription > *) 0 ;
  std::vector< ccapi::Subscription >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< ccapi::Subscription > **)&_swig_go_0; 
  
  {
    try {
      result = ((std::vector< ccapi::Subscription > const *)arg1)->size();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_SubscriptionList_capacity_ccapi_00042a34e9364138(std::vector< ccapi::Subscription > *_swig_go_0) {
  std::vector< ccapi::Subscription > *arg1 = (std::vector< ccapi::Subscription > *) 0 ;
  std::vector< ccapi::Subscription >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< ccapi::Subscription > **)&_swig_go_0; 
  
  {
    try {
      result = ((std::vector< ccapi::Subscription > const *)arg1)->capacity();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SubscriptionList_reserve_ccapi_00042a34e9364138(std::vector< ccapi::Subscription > *_swig_go_0, long long _swig_go_1) {
  std::vector< ccapi::Subscription > *arg1 = (std::vector< ccapi::Subscription > *) 0 ;
  std::vector< ccapi::Subscription >::size_type arg2 ;
  
  arg1 = *(std::vector< ccapi::Subscription > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  {
    try {
      (arg1)->reserve(SWIG_STD_MOVE(arg2));
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


bool _wrap_SubscriptionList_isEmpty_ccapi_00042a34e9364138(std::vector< ccapi::Subscription > *_swig_go_0) {
  std::vector< ccapi::Subscription > *arg1 = (std::vector< ccapi::Subscription > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< ccapi::Subscription > **)&_swig_go_0; 
  
  {
    try {
      result = (bool)((std::vector< ccapi::Subscription > const *)arg1)->empty();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SubscriptionList_clear_ccapi_00042a34e9364138(std::vector< ccapi::Subscription > *_swig_go_0) {
  std::vector< ccapi::Subscription > *arg1 = (std::vector< ccapi::Subscription > *) 0 ;
  
  arg1 = *(std::vector< ccapi::Subscription > **)&_swig_go_0; 
  
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_SubscriptionList_add_ccapi_00042a34e9364138(std::vector< ccapi::Subscription > *_swig_go_0, ccapi::Subscription *_swig_go_1) {
  std::vector< ccapi::Subscription > *arg1 = (std::vector< ccapi::Subscription > *) 0 ;
  std::vector< ccapi::Subscription >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< ccapi::Subscription > **)&_swig_go_0; 
  arg2 = *(std::vector< ccapi::Subscription >::value_type **)&_swig_go_1; 
  
  {
    try {
      (arg1)->push_back((std::vector< ccapi::Subscription >::value_type const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


ccapi::Subscription *_wrap_SubscriptionList_get_ccapi_00042a34e9364138(std::vector< ccapi::Subscription > *_swig_go_0, intgo _swig_go_1) {
  std::vector< ccapi::Subscription > *arg1 = (std::vector< ccapi::Subscription > *) 0 ;
  int arg2 ;
  std::vector< ccapi::Subscription >::value_type *result = 0 ;
  ccapi::Subscription *_swig_go_result;
  
  arg1 = *(std::vector< ccapi::Subscription > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  {
    try {
      try {
        result = (std::vector< ccapi::Subscription >::value_type *) &std_vector_Sl_ccapi_Subscription_Sg__get(arg1,arg2);
      } catch(std::out_of_range &_e) {
        _swig_gopanic((&_e)->what());
      }
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::vector< ccapi::Subscription >::value_type **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SubscriptionList_set_ccapi_00042a34e9364138(std::vector< ccapi::Subscription > *_swig_go_0, intgo _swig_go_1, ccapi::Subscription *_swig_go_2) {
  std::vector< ccapi::Subscription > *arg1 = (std::vector< ccapi::Subscription > *) 0 ;
  int arg2 ;
  std::vector< ccapi::Subscription >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< ccapi::Subscription > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(std::vector< ccapi::Subscription >::value_type **)&_swig_go_2; 
  
  {
    try {
      try {
        std_vector_Sl_ccapi_Subscription_Sg__set(arg1,arg2,(ccapi::Subscription const &)*arg3);
      } catch(std::out_of_range &_e) {
        _swig_gopanic((&_e)->what());
      }
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_delete_SubscriptionList_ccapi_00042a34e9364138(std::vector< ccapi::Subscription > *_swig_go_0) {
  std::vector< ccapi::Subscription > *arg1 = (std::vector< ccapi::Subscription > *) 0 ;
  
  arg1 = *(std::vector< ccapi::Subscription > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


std::vector< ccapi::Request > *_wrap_new_RequestList__SWIG_0_ccapi_00042a34e9364138() {
  std::vector< ccapi::Request > *result = 0 ;
  std::vector< ccapi::Request > *_swig_go_result;
  
  
  {
    try {
      result = (std::vector< ccapi::Request > *)new std::vector< ccapi::Request >();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::vector< ccapi::Request > **)&_swig_go_result = (std::vector< ccapi::Request > *)result; 
  return _swig_go_result;
}


std::vector< ccapi::Request > *_wrap_new_RequestList__SWIG_1_ccapi_00042a34e9364138(long long _swig_go_0) {
  std::vector< ccapi::Request >::size_type arg1 ;
  std::vector< ccapi::Request > *result = 0 ;
  std::vector< ccapi::Request > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  {
    try {
      result = (std::vector< ccapi::Request > *)new std::vector< ccapi::Request >(SWIG_STD_MOVE(arg1));
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::vector< ccapi::Request > **)&_swig_go_result = (std::vector< ccapi::Request > *)result; 
  return _swig_go_result;
}


std::vector< ccapi::Request > *_wrap_new_RequestList__SWIG_2_ccapi_00042a34e9364138(std::vector< ccapi::Request > *_swig_go_0) {
  std::vector< ccapi::Request > *arg1 = 0 ;
  std::vector< ccapi::Request > *result = 0 ;
  std::vector< ccapi::Request > *_swig_go_result;
  
  arg1 = *(std::vector< ccapi::Request > **)&_swig_go_0; 
  
  {
    try {
      result = (std::vector< ccapi::Request > *)new std::vector< ccapi::Request >((std::vector< ccapi::Request > const &)*arg1);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::vector< ccapi::Request > **)&_swig_go_result = (std::vector< ccapi::Request > *)result; 
  return _swig_go_result;
}


long long _wrap_RequestList_size_ccapi_00042a34e9364138(std::vector< ccapi::Request > *_swig_go_0) {
  std::vector< ccapi::Request > *arg1 = (std::vector< ccapi::Request > *) 0 ;
  std::vector< ccapi::Request >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< ccapi::Request > **)&_swig_go_0; 
  
  {
    try {
      result = ((std::vector< ccapi::Request > const *)arg1)->size();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


long long _wrap_RequestList_capacity_ccapi_00042a34e9364138(std::vector< ccapi::Request > *_swig_go_0) {
  std::vector< ccapi::Request > *arg1 = (std::vector< ccapi::Request > *) 0 ;
  std::vector< ccapi::Request >::size_type result;
  long long _swig_go_result;
  
  arg1 = *(std::vector< ccapi::Request > **)&_swig_go_0; 
  
  {
    try {
      result = ((std::vector< ccapi::Request > const *)arg1)->capacity();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RequestList_reserve_ccapi_00042a34e9364138(std::vector< ccapi::Request > *_swig_go_0, long long _swig_go_1) {
  std::vector< ccapi::Request > *arg1 = (std::vector< ccapi::Request > *) 0 ;
  std::vector< ccapi::Request >::size_type arg2 ;
  
  arg1 = *(std::vector< ccapi::Request > **)&_swig_go_0; 
  arg2 = (size_t)_swig_go_1; 
  
  {
    try {
      (arg1)->reserve(SWIG_STD_MOVE(arg2));
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


bool _wrap_RequestList_isEmpty_ccapi_00042a34e9364138(std::vector< ccapi::Request > *_swig_go_0) {
  std::vector< ccapi::Request > *arg1 = (std::vector< ccapi::Request > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(std::vector< ccapi::Request > **)&_swig_go_0; 
  
  {
    try {
      result = (bool)((std::vector< ccapi::Request > const *)arg1)->empty();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RequestList_clear_ccapi_00042a34e9364138(std::vector< ccapi::Request > *_swig_go_0) {
  std::vector< ccapi::Request > *arg1 = (std::vector< ccapi::Request > *) 0 ;
  
  arg1 = *(std::vector< ccapi::Request > **)&_swig_go_0; 
  
  {
    try {
      (arg1)->clear();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_RequestList_add_ccapi_00042a34e9364138(std::vector< ccapi::Request > *_swig_go_0, ccapi::Request *_swig_go_1) {
  std::vector< ccapi::Request > *arg1 = (std::vector< ccapi::Request > *) 0 ;
  std::vector< ccapi::Request >::value_type *arg2 = 0 ;
  
  arg1 = *(std::vector< ccapi::Request > **)&_swig_go_0; 
  arg2 = *(std::vector< ccapi::Request >::value_type **)&_swig_go_1; 
  
  {
    try {
      (arg1)->push_back((std::vector< ccapi::Request >::value_type const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


ccapi::Request *_wrap_RequestList_get_ccapi_00042a34e9364138(std::vector< ccapi::Request > *_swig_go_0, intgo _swig_go_1) {
  std::vector< ccapi::Request > *arg1 = (std::vector< ccapi::Request > *) 0 ;
  int arg2 ;
  std::vector< ccapi::Request >::value_type *result = 0 ;
  ccapi::Request *_swig_go_result;
  
  arg1 = *(std::vector< ccapi::Request > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  {
    try {
      try {
        result = (std::vector< ccapi::Request >::value_type *) &std_vector_Sl_ccapi_Request_Sg__get(arg1,arg2);
      } catch(std::out_of_range &_e) {
        _swig_gopanic((&_e)->what());
      }
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::vector< ccapi::Request >::value_type **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_RequestList_set_ccapi_00042a34e9364138(std::vector< ccapi::Request > *_swig_go_0, intgo _swig_go_1, ccapi::Request *_swig_go_2) {
  std::vector< ccapi::Request > *arg1 = (std::vector< ccapi::Request > *) 0 ;
  int arg2 ;
  std::vector< ccapi::Request >::value_type *arg3 = 0 ;
  
  arg1 = *(std::vector< ccapi::Request > **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(std::vector< ccapi::Request >::value_type **)&_swig_go_2; 
  
  {
    try {
      try {
        std_vector_Sl_ccapi_Request_Sg__set(arg1,arg2,(ccapi::Request const &)*arg3);
      } catch(std::out_of_range &_e) {
        _swig_gopanic((&_e)->what());
      }
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_delete_RequestList_ccapi_00042a34e9364138(std::vector< ccapi::Request > *_swig_go_0) {
  std::vector< ccapi::Request > *arg1 = (std::vector< ccapi::Request > *) 0 ;
  
  arg1 = *(std::vector< ccapi::Request > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


ccapi::Element *_wrap_new_Element__SWIG_0_ccapi_00042a34e9364138(bool _swig_go_0) {
  bool arg1 ;
  ccapi::Element *result = 0 ;
  ccapi::Element *_swig_go_result;
  
  arg1 = (bool)_swig_go_0; 
  
  {
    try {
      result = (ccapi::Element *)new ccapi::Element(arg1);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::Element **)&_swig_go_result = (ccapi::Element *)result; 
  return _swig_go_result;
}


ccapi::Element *_wrap_new_Element__SWIG_1_ccapi_00042a34e9364138() {
  ccapi::Element *result = 0 ;
  ccapi::Element *_swig_go_result;
  
  
  {
    try {
      result = (ccapi::Element *)new ccapi::Element();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::Element **)&_swig_go_result = (ccapi::Element *)result; 
  return _swig_go_result;
}


void _wrap_Element_insert__SWIG_0_ccapi_00042a34e9364138(ccapi::Element *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  ccapi::Element *arg1 = (ccapi::Element *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(ccapi::Element **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      (arg1)->insert((std::string const &)*arg2,(std::string const &)*arg3);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Element_insert__SWIG_1_ccapi_00042a34e9364138(ccapi::Element *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2) {
  ccapi::Element *arg1 = (ccapi::Element *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(ccapi::Element **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  {
    try {
      (arg1)->insert(arg2,(std::string const &)*arg3);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Element_emplace__SWIG_0_ccapi_00042a34e9364138(ccapi::Element *_swig_go_0, _gostring_* _swig_go_1, _gostring_* _swig_go_2) {
  ccapi::Element *arg1 = (ccapi::Element *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(ccapi::Element **)&_swig_go_0; 
  arg2 = *(std::string **)&_swig_go_1; 
  arg3 = *(std::string **)&_swig_go_2; 
  
  {
    try {
      (arg1)->emplace(*arg2,*arg3);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Element_emplace__SWIG_1_ccapi_00042a34e9364138(ccapi::Element *_swig_go_0, intgo _swig_go_1, _gostring_* _swig_go_2) {
  ccapi::Element *arg1 = (ccapi::Element *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = *(ccapi::Element **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = *(std::string **)&_swig_go_2; 
  
  {
    try {
      (arg1)->emplace(arg2,*arg3);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


bool _wrap_Element_has__SWIG_0_ccapi_00042a34e9364138(ccapi::Element *_swig_go_0, _gostring_ _swig_go_1) {
  ccapi::Element *arg1 = (ccapi::Element *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(ccapi::Element **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = (bool)((ccapi::Element const *)arg1)->has((std::string const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_Element_has__SWIG_1_ccapi_00042a34e9364138(ccapi::Element *_swig_go_0, intgo _swig_go_1) {
  ccapi::Element *arg1 = (ccapi::Element *) 0 ;
  int arg2 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(ccapi::Element **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  {
    try {
      result = (bool)((ccapi::Element const *)arg1)->has(arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_Element_getValue__SWIG_0_ccapi_00042a34e9364138(ccapi::Element *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  ccapi::Element *arg1 = (ccapi::Element *) 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Element **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  (&arg3)->assign(_swig_go_2.p, _swig_go_2.n); 
  
  {
    try {
      result = ((ccapi::Element const *)arg1)->getValue((std::string const &)*arg2,SWIG_STD_MOVE(arg3));
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Element_getValue__SWIG_1_ccapi_00042a34e9364138(ccapi::Element *_swig_go_0, _gostring_ _swig_go_1) {
  ccapi::Element *arg1 = (ccapi::Element *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Element **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      result = ((ccapi::Element const *)arg1)->getValue((std::string const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Element_getValue__SWIG_2_ccapi_00042a34e9364138(ccapi::Element *_swig_go_0, intgo _swig_go_1, _gostring_ _swig_go_2) {
  ccapi::Element *arg1 = (ccapi::Element *) 0 ;
  int arg2 ;
  std::string arg3 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Element **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  (&arg3)->assign(_swig_go_2.p, _swig_go_2.n); 
  
  {
    try {
      result = ((ccapi::Element const *)arg1)->getValue(arg2,SWIG_STD_MOVE(arg3));
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Element_getValue__SWIG_3_ccapi_00042a34e9364138(ccapi::Element *_swig_go_0, intgo _swig_go_1) {
  ccapi::Element *arg1 = (ccapi::Element *) 0 ;
  int arg2 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Element **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  {
    try {
      result = ((ccapi::Element const *)arg1)->getValue(arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Element_toString_ccapi_00042a34e9364138(ccapi::Element *_swig_go_0) {
  ccapi::Element *arg1 = (ccapi::Element *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Element **)&_swig_go_0; 
  
  {
    try {
      result = ((ccapi::Element const *)arg1)->toString();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Element_toStringPretty__SWIG_0_ccapi_00042a34e9364138(ccapi::Element *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, bool _swig_go_3) {
  ccapi::Element *arg1 = (ccapi::Element *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Element **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (bool)_swig_go_3; 
  
  {
    try {
      result = ((ccapi::Element const *)arg1)->toStringPretty(arg2,arg3,arg4);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Element_toStringPretty__SWIG_1_ccapi_00042a34e9364138(ccapi::Element *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  ccapi::Element *arg1 = (ccapi::Element *) 0 ;
  int arg2 ;
  int arg3 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Element **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  {
    try {
      result = ((ccapi::Element const *)arg1)->toStringPretty(arg2,arg3);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Element_toStringPretty__SWIG_2_ccapi_00042a34e9364138(ccapi::Element *_swig_go_0, intgo _swig_go_1) {
  ccapi::Element *arg1 = (ccapi::Element *) 0 ;
  int arg2 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Element **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  {
    try {
      result = ((ccapi::Element const *)arg1)->toStringPretty(arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Element_toStringPretty__SWIG_3_ccapi_00042a34e9364138(ccapi::Element *_swig_go_0) {
  ccapi::Element *arg1 = (ccapi::Element *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Element **)&_swig_go_0; 
  
  {
    try {
      result = ((ccapi::Element const *)arg1)->toStringPretty();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


std::map< std::string,std::string,std::less< std::string > > *_wrap_Element_getNameValueMap_ccapi_00042a34e9364138(ccapi::Element *_swig_go_0) {
  ccapi::Element *arg1 = (ccapi::Element *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *result = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(ccapi::Element **)&_swig_go_0; 
  
  {
    try {
      result = (std::map< std::string,std::string,std::less< std::string > > *) &((ccapi::Element const *)arg1)->getNameValueMap();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_result = result; 
  return _swig_go_result;
}


std::map< int,std::string,std::less< int > > *_wrap_Element_getTagValueMap_ccapi_00042a34e9364138(ccapi::Element *_swig_go_0) {
  ccapi::Element *arg1 = (ccapi::Element *) 0 ;
  std::map< int,std::string,std::less< int > > *result = 0 ;
  std::map< int,std::string,std::less< int > > *_swig_go_result;
  
  arg1 = *(ccapi::Element **)&_swig_go_0; 
  
  {
    try {
      result = (std::map< int,std::string,std::less< int > > *) &((ccapi::Element const *)arg1)->getTagValueMap();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::map< int,std::string,std::less< int > > **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_Element_ccapi_00042a34e9364138(ccapi::Element *_swig_go_0) {
  ccapi::Element *arg1 = (ccapi::Element *) 0 ;
  
  arg1 = *(ccapi::Element **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


intgo _wrap_RecapType_UNKNOWN_Message_ccapi_00042a34e9364138() {
  ccapi::Message::RecapType result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::RecapType::UNKNOWN;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_RecapType_SOLICITED_Message_ccapi_00042a34e9364138() {
  ccapi::Message::RecapType result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::RecapType::SOLICITED;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_RecapType_NONE_Message_ccapi_00042a34e9364138() {
  ccapi::Message::RecapType result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::RecapType::NONE;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


_gostring_ _wrap_Message_recapTypeToString_ccapi_00042a34e9364138(intgo _swig_go_0) {
  ccapi::Message::RecapType arg1 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = (ccapi::Message::RecapType)_swig_go_0; 
  
  {
    try {
      result = ccapi::Message::recapTypeToString(arg1);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


intgo _wrap_Type_UNKNOWN_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::UNKNOWN;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_AUTHORIZATION_SUCCESS_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::AUTHORIZATION_SUCCESS;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_AUTHORIZATION_FAILURE_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::AUTHORIZATION_FAILURE;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_MARKET_DATA_EVENTS_MARKET_DEPTH_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::MARKET_DATA_EVENTS_MARKET_DEPTH;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_MARKET_DATA_EVENTS_TRADE_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::MARKET_DATA_EVENTS_TRADE;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_MARKET_DATA_EVENTS_AGG_TRADE_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::MARKET_DATA_EVENTS_AGG_TRADE;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_MARKET_DATA_EVENTS_CANDLESTICK_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::MARKET_DATA_EVENTS_CANDLESTICK;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_EXECUTION_MANAGEMENT_EVENTS_ORDER_UPDATE_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::EXECUTION_MANAGEMENT_EVENTS_ORDER_UPDATE;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_EXECUTION_MANAGEMENT_EVENTS_PRIVATE_TRADE_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::EXECUTION_MANAGEMENT_EVENTS_PRIVATE_TRADE;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_EXECUTION_MANAGEMENT_EVENTS_BALANCE_UPDATE_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::EXECUTION_MANAGEMENT_EVENTS_BALANCE_UPDATE;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_EXECUTION_MANAGEMENT_EVENTS_POSITION_UPDATE_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::EXECUTION_MANAGEMENT_EVENTS_POSITION_UPDATE;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_SUBSCRIPTION_STARTED_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::SUBSCRIPTION_STARTED;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_SUBSCRIPTION_FAILURE_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::SUBSCRIPTION_FAILURE;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_SESSION_CONNECTION_UP_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::SESSION_CONNECTION_UP;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_SESSION_CONNECTION_DOWN_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::SESSION_CONNECTION_DOWN;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_INCORRECT_STATE_FOUND_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::INCORRECT_STATE_FOUND;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_CREATE_ORDER_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::CREATE_ORDER;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_CANCEL_ORDER_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::CANCEL_ORDER;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_GET_ORDER_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::GET_ORDER;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_GET_OPEN_ORDERS_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::GET_OPEN_ORDERS;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_CANCEL_OPEN_ORDERS_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::CANCEL_OPEN_ORDERS;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_GET_ACCOUNTS_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::GET_ACCOUNTS;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_GET_ACCOUNT_BALANCES_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::GET_ACCOUNT_BALANCES;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_GET_ACCOUNT_POSITIONS_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::GET_ACCOUNT_POSITIONS;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_GET_RECENT_TRADES_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::GET_RECENT_TRADES;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_GET_HISTORICAL_TRADES_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::GET_HISTORICAL_TRADES;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_GET_RECENT_AGG_TRADES_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::GET_RECENT_AGG_TRADES;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_GET_HISTORICAL_AGG_TRADES_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::GET_HISTORICAL_AGG_TRADES;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_GET_RECENT_CANDLESTICKS_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::GET_RECENT_CANDLESTICKS;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_GET_HISTORICAL_CANDLESTICKS_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::GET_HISTORICAL_CANDLESTICKS;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_GET_MARKET_DEPTH_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::GET_MARKET_DEPTH;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_GET_INSTRUMENT_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::GET_INSTRUMENT;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_GET_INSTRUMENTS_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::GET_INSTRUMENTS;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_RESPONSE_ERROR_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::RESPONSE_ERROR;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_REQUEST_FAILURE_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::REQUEST_FAILURE;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_GENERIC_ERROR_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::GENERIC_ERROR;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_CUSTOM_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::CUSTOM;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_FIX_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::FIX;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_FIX_FAILURE_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::FIX_FAILURE;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_GENERIC_PUBLIC_REQUEST_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::GENERIC_PUBLIC_REQUEST;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_GENERIC_PUBLIC_SUBSCRIPTION_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::GENERIC_PUBLIC_SUBSCRIPTION;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_GENERIC_PRIVATE_REQUEST_Message_ccapi_00042a34e9364138() {
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Message::Type::GENERIC_PRIVATE_REQUEST;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


_gostring_ _wrap_Message_typeToString_ccapi_00042a34e9364138(intgo _swig_go_0) {
  ccapi::Message::Type arg1 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = (ccapi::Message::Type)_swig_go_0; 
  
  {
    try {
      result = ccapi::Message::typeToString(arg1);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Message_toString_ccapi_00042a34e9364138(ccapi::Message *_swig_go_0) {
  ccapi::Message *arg1 = (ccapi::Message *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Message **)&_swig_go_0; 
  
  {
    try {
      result = ((ccapi::Message const *)arg1)->toString();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Message_toStringPretty__SWIG_0_ccapi_00042a34e9364138(ccapi::Message *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, bool _swig_go_3) {
  ccapi::Message *arg1 = (ccapi::Message *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Message **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (bool)_swig_go_3; 
  
  {
    try {
      result = ((ccapi::Message const *)arg1)->toStringPretty(arg2,arg3,arg4);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Message_toStringPretty__SWIG_1_ccapi_00042a34e9364138(ccapi::Message *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  ccapi::Message *arg1 = (ccapi::Message *) 0 ;
  int arg2 ;
  int arg3 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Message **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  {
    try {
      result = ((ccapi::Message const *)arg1)->toStringPretty(arg2,arg3);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Message_toStringPretty__SWIG_2_ccapi_00042a34e9364138(ccapi::Message *_swig_go_0, intgo _swig_go_1) {
  ccapi::Message *arg1 = (ccapi::Message *) 0 ;
  int arg2 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Message **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  {
    try {
      result = ((ccapi::Message const *)arg1)->toStringPretty(arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Message_toStringPretty__SWIG_3_ccapi_00042a34e9364138(ccapi::Message *_swig_go_0) {
  ccapi::Message *arg1 = (ccapi::Message *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Message **)&_swig_go_0; 
  
  {
    try {
      result = ((ccapi::Message const *)arg1)->toStringPretty();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


std::vector< ccapi::Element > *_wrap_Message_getElementList_ccapi_00042a34e9364138(ccapi::Message *_swig_go_0) {
  ccapi::Message *arg1 = (ccapi::Message *) 0 ;
  std::vector< ccapi::Element > *result = 0 ;
  std::vector< ccapi::Element > *_swig_go_result;
  
  arg1 = *(ccapi::Message **)&_swig_go_0; 
  
  {
    try {
      result = (std::vector< ccapi::Element > *) &((ccapi::Message const *)arg1)->getElementList();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::vector< ccapi::Element > **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Message_setElementList__SWIG_0_ccapi_00042a34e9364138(ccapi::Message *_swig_go_0, std::vector< ccapi::Element > *_swig_go_1) {
  ccapi::Message *arg1 = (ccapi::Message *) 0 ;
  std::vector< ccapi::Element > *arg2 = 0 ;
  
  arg1 = *(ccapi::Message **)&_swig_go_0; 
  arg2 = *(std::vector< ccapi::Element > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->setElementList((std::vector< ccapi::Element > const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Message_setElementList__SWIG_1_ccapi_00042a34e9364138(ccapi::Message *_swig_go_0, std::vector< ccapi::Element > *_swig_go_1) {
  ccapi::Message *arg1 = (ccapi::Message *) 0 ;
  std::vector< ccapi::Element > *arg2 = 0 ;
  
  arg1 = *(ccapi::Message **)&_swig_go_0; 
  arg2 = *(std::vector< ccapi::Element > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->setElementList(*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


std::vector< std::string > *_wrap_Message_getCorrelationIdList_ccapi_00042a34e9364138(ccapi::Message *_swig_go_0) {
  ccapi::Message *arg1 = (ccapi::Message *) 0 ;
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *_swig_go_result;
  
  arg1 = *(ccapi::Message **)&_swig_go_0; 
  
  {
    try {
      result = (std::vector< std::string > *) &((ccapi::Message const *)arg1)->getCorrelationIdList();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::vector< std::string > **)&_swig_go_result = result; 
  return _swig_go_result;
}


std::map< std::string,std::string,std::less< std::string > > *_wrap_Message_getSecondaryCorrelationIdMap_ccapi_00042a34e9364138(ccapi::Message *_swig_go_0) {
  ccapi::Message *arg1 = (ccapi::Message *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *result = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(ccapi::Message **)&_swig_go_0; 
  
  {
    try {
      result = (std::map< std::string,std::string,std::less< std::string > > *) &((ccapi::Message const *)arg1)->getSecondaryCorrelationIdMap();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Message_setCorrelationIdList_ccapi_00042a34e9364138(ccapi::Message *_swig_go_0, std::vector< std::string > *_swig_go_1) {
  ccapi::Message *arg1 = (ccapi::Message *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = *(ccapi::Message **)&_swig_go_0; 
  arg2 = *(std::vector< std::string > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->setCorrelationIdList((std::vector< std::string > const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Message_setSecondaryCorrelationIdMap_ccapi_00042a34e9364138(ccapi::Message *_swig_go_0, std::map< std::string,std::string,std::less< std::string > > *_swig_go_1) {
  ccapi::Message *arg1 = (ccapi::Message *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = 0 ;
  
  arg1 = *(ccapi::Message **)&_swig_go_0; 
  arg2 = *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->setSecondaryCorrelationIdMap((std::map< std::string,std::string,std::less< std::string > > const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


std::chrono::time_point< std::chrono::system_clock,std::chrono::nanoseconds > *_wrap_Message_getTime_ccapi_00042a34e9364138(ccapi::Message *_swig_go_0) {
  ccapi::Message *arg1 = (ccapi::Message *) 0 ;
  ccapi::TimePoint result;
  std::chrono::time_point< std::chrono::system_clock,std::chrono::nanoseconds > *_swig_go_result;
  
  arg1 = *(ccapi::Message **)&_swig_go_0; 
  
  {
    try {
      result = ((ccapi::Message const *)arg1)->getTime();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::TimePoint **)&_swig_go_result = new ccapi::TimePoint(result); 
  return _swig_go_result;
}


_gostring_ _wrap_Message_getTimeISO_ccapi_00042a34e9364138(ccapi::Message *_swig_go_0) {
  ccapi::Message *arg1 = (ccapi::Message *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Message **)&_swig_go_0; 
  
  {
    try {
      result = ((ccapi::Message const *)arg1)->getTimeISO();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


std::pair< long long,long long > *_wrap_Message_getTimeUnix_ccapi_00042a34e9364138(ccapi::Message *_swig_go_0) {
  ccapi::Message *arg1 = (ccapi::Message *) 0 ;
  std::pair< long long,long long > result;
  std::pair< long long,long long > *_swig_go_result;
  
  arg1 = *(ccapi::Message **)&_swig_go_0; 
  
  {
    try {
      result = ((ccapi::Message const *)arg1)->getTimeUnix();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::pair< long long,long long > **)&_swig_go_result = new std::pair< long long,long long >(result); 
  return _swig_go_result;
}


std::pair< long long,long long > *_wrap_Message_getTimePair_ccapi_00042a34e9364138(ccapi::Message *_swig_go_0) {
  ccapi::Message *arg1 = (ccapi::Message *) 0 ;
  std::pair< long long,long long > result;
  std::pair< long long,long long > *_swig_go_result;
  
  arg1 = *(ccapi::Message **)&_swig_go_0; 
  
  {
    try {
      result = ((ccapi::Message const *)arg1)->getTimePair();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::pair< long long,long long > **)&_swig_go_result = new std::pair< long long,long long >(result); 
  return _swig_go_result;
}


void _wrap_Message_setTime_ccapi_00042a34e9364138(ccapi::Message *_swig_go_0, std::chrono::time_point< std::chrono::system_clock,std::chrono::nanoseconds > *_swig_go_1) {
  ccapi::Message *arg1 = (ccapi::Message *) 0 ;
  ccapi::TimePoint arg2 ;
  ccapi::TimePoint *argp2 ;
  
  arg1 = *(ccapi::Message **)&_swig_go_0; 
  
  argp2 = (ccapi::TimePoint *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null ccapi::TimePoint");
  }
  arg2 = (ccapi::TimePoint)*argp2;
  
  
  {
    try {
      (arg1)->setTime(SWIG_STD_MOVE(arg2));
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


intgo _wrap_Message_getRecapType_ccapi_00042a34e9364138(ccapi::Message *_swig_go_0) {
  ccapi::Message *arg1 = (ccapi::Message *) 0 ;
  ccapi::Message::RecapType result;
  intgo _swig_go_result;
  
  arg1 = *(ccapi::Message **)&_swig_go_0; 
  
  {
    try {
      result = (ccapi::Message::RecapType)((ccapi::Message const *)arg1)->getRecapType();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_Message_setRecapType_ccapi_00042a34e9364138(ccapi::Message *_swig_go_0, intgo _swig_go_1) {
  ccapi::Message *arg1 = (ccapi::Message *) 0 ;
  ccapi::Message::RecapType arg2 ;
  
  arg1 = *(ccapi::Message **)&_swig_go_0; 
  arg2 = (ccapi::Message::RecapType)_swig_go_1; 
  
  {
    try {
      (arg1)->setRecapType(arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


intgo _wrap_Message_getType_ccapi_00042a34e9364138(ccapi::Message *_swig_go_0) {
  ccapi::Message *arg1 = (ccapi::Message *) 0 ;
  ccapi::Message::Type result;
  intgo _swig_go_result;
  
  arg1 = *(ccapi::Message **)&_swig_go_0; 
  
  {
    try {
      result = (ccapi::Message::Type)((ccapi::Message const *)arg1)->getType();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_Message_setType_ccapi_00042a34e9364138(ccapi::Message *_swig_go_0, intgo _swig_go_1) {
  ccapi::Message *arg1 = (ccapi::Message *) 0 ;
  ccapi::Message::Type arg2 ;
  
  arg1 = *(ccapi::Message **)&_swig_go_0; 
  arg2 = (ccapi::Message::Type)_swig_go_1; 
  
  {
    try {
      (arg1)->setType(arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


std::chrono::time_point< std::chrono::system_clock,std::chrono::nanoseconds > *_wrap_Message_getTimeReceived_ccapi_00042a34e9364138(ccapi::Message *_swig_go_0) {
  ccapi::Message *arg1 = (ccapi::Message *) 0 ;
  ccapi::TimePoint result;
  std::chrono::time_point< std::chrono::system_clock,std::chrono::nanoseconds > *_swig_go_result;
  
  arg1 = *(ccapi::Message **)&_swig_go_0; 
  
  {
    try {
      result = ((ccapi::Message const *)arg1)->getTimeReceived();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::TimePoint **)&_swig_go_result = new ccapi::TimePoint(result); 
  return _swig_go_result;
}


_gostring_ _wrap_Message_getTimeReceivedISO_ccapi_00042a34e9364138(ccapi::Message *_swig_go_0) {
  ccapi::Message *arg1 = (ccapi::Message *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Message **)&_swig_go_0; 
  
  {
    try {
      result = ((ccapi::Message const *)arg1)->getTimeReceivedISO();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


std::pair< long long,long long > *_wrap_Message_getTimeReceivedUnix_ccapi_00042a34e9364138(ccapi::Message *_swig_go_0) {
  ccapi::Message *arg1 = (ccapi::Message *) 0 ;
  std::pair< long long,long long > result;
  std::pair< long long,long long > *_swig_go_result;
  
  arg1 = *(ccapi::Message **)&_swig_go_0; 
  
  {
    try {
      result = ((ccapi::Message const *)arg1)->getTimeReceivedUnix();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::pair< long long,long long > **)&_swig_go_result = new std::pair< long long,long long >(result); 
  return _swig_go_result;
}


std::pair< long long,long long > *_wrap_Message_getTimeReceivedPair_ccapi_00042a34e9364138(ccapi::Message *_swig_go_0) {
  ccapi::Message *arg1 = (ccapi::Message *) 0 ;
  std::pair< long long,long long > result;
  std::pair< long long,long long > *_swig_go_result;
  
  arg1 = *(ccapi::Message **)&_swig_go_0; 
  
  {
    try {
      result = ((ccapi::Message const *)arg1)->getTimeReceivedPair();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::pair< long long,long long > **)&_swig_go_result = new std::pair< long long,long long >(result); 
  return _swig_go_result;
}


void _wrap_Message_setTimeReceived_ccapi_00042a34e9364138(ccapi::Message *_swig_go_0, std::chrono::time_point< std::chrono::system_clock,std::chrono::nanoseconds > *_swig_go_1) {
  ccapi::Message *arg1 = (ccapi::Message *) 0 ;
  ccapi::TimePoint arg2 ;
  ccapi::TimePoint *argp2 ;
  
  arg1 = *(ccapi::Message **)&_swig_go_0; 
  
  argp2 = (ccapi::TimePoint *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null ccapi::TimePoint");
  }
  arg2 = (ccapi::TimePoint)*argp2;
  
  
  {
    try {
      (arg1)->setTimeReceived(SWIG_STD_MOVE(arg2));
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


ccapi::Message *_wrap_new_Message_ccapi_00042a34e9364138() {
  ccapi::Message *result = 0 ;
  ccapi::Message *_swig_go_result;
  
  
  {
    try {
      result = (ccapi::Message *)new ccapi::Message();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::Message **)&_swig_go_result = (ccapi::Message *)result; 
  return _swig_go_result;
}


void _wrap_delete_Message_ccapi_00042a34e9364138(ccapi::Message *_swig_go_0) {
  ccapi::Message *arg1 = (ccapi::Message *) 0 ;
  
  arg1 = *(ccapi::Message **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


intgo _wrap_Type_UNKNOWN_Event_ccapi_00042a34e9364138() {
  ccapi::Event::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Event::Type::UNKNOWN;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_SESSION_STATUS_Event_ccapi_00042a34e9364138() {
  ccapi::Event::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Event::Type::SESSION_STATUS;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_SUBSCRIPTION_STATUS_Event_ccapi_00042a34e9364138() {
  ccapi::Event::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Event::Type::SUBSCRIPTION_STATUS;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_REQUEST_STATUS_Event_ccapi_00042a34e9364138() {
  ccapi::Event::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Event::Type::REQUEST_STATUS;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_RESPONSE_Event_ccapi_00042a34e9364138() {
  ccapi::Event::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Event::Type::RESPONSE;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_SUBSCRIPTION_DATA_Event_ccapi_00042a34e9364138() {
  ccapi::Event::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Event::Type::SUBSCRIPTION_DATA;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_AUTHORIZATION_STATUS_Event_ccapi_00042a34e9364138() {
  ccapi::Event::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Event::Type::AUTHORIZATION_STATUS;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_FIX_Event_ccapi_00042a34e9364138() {
  ccapi::Event::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Event::Type::FIX;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Type_FIX_STATUS_Event_ccapi_00042a34e9364138() {
  ccapi::Event::Type result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Event::Type::FIX_STATUS;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


_gostring_ _wrap_Event_typeToString_ccapi_00042a34e9364138(intgo _swig_go_0) {
  ccapi::Event::Type arg1 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = (ccapi::Event::Type)_swig_go_0; 
  
  {
    try {
      result = ccapi::Event::typeToString(arg1);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Event_toString_ccapi_00042a34e9364138(ccapi::Event *_swig_go_0) {
  ccapi::Event *arg1 = (ccapi::Event *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Event **)&_swig_go_0; 
  
  {
    try {
      result = ((ccapi::Event const *)arg1)->toString();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Event_toStringPretty__SWIG_0_ccapi_00042a34e9364138(ccapi::Event *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, bool _swig_go_3) {
  ccapi::Event *arg1 = (ccapi::Event *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Event **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  arg4 = (bool)_swig_go_3; 
  
  {
    try {
      result = ((ccapi::Event const *)arg1)->toStringPretty(arg2,arg3,arg4);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Event_toStringPretty__SWIG_1_ccapi_00042a34e9364138(ccapi::Event *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2) {
  ccapi::Event *arg1 = (ccapi::Event *) 0 ;
  int arg2 ;
  int arg3 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Event **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  arg3 = (int)_swig_go_2; 
  
  {
    try {
      result = ((ccapi::Event const *)arg1)->toStringPretty(arg2,arg3);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Event_toStringPretty__SWIG_2_ccapi_00042a34e9364138(ccapi::Event *_swig_go_0, intgo _swig_go_1) {
  ccapi::Event *arg1 = (ccapi::Event *) 0 ;
  int arg2 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Event **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  {
    try {
      result = ((ccapi::Event const *)arg1)->toStringPretty(arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Event_toStringPretty__SWIG_3_ccapi_00042a34e9364138(ccapi::Event *_swig_go_0) {
  ccapi::Event *arg1 = (ccapi::Event *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Event **)&_swig_go_0; 
  
  {
    try {
      result = ((ccapi::Event const *)arg1)->toStringPretty();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


std::vector< ccapi::Message > *_wrap_Event_getMessageList_ccapi_00042a34e9364138(ccapi::Event *_swig_go_0) {
  ccapi::Event *arg1 = (ccapi::Event *) 0 ;
  std::vector< ccapi::Message > *result = 0 ;
  std::vector< ccapi::Message > *_swig_go_result;
  
  arg1 = *(ccapi::Event **)&_swig_go_0; 
  
  {
    try {
      result = (std::vector< ccapi::Message > *) &((ccapi::Event const *)arg1)->getMessageList();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::vector< ccapi::Message > **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Event_addMessages__SWIG_0_ccapi_00042a34e9364138(ccapi::Event *_swig_go_0, std::vector< ccapi::Message > *_swig_go_1) {
  ccapi::Event *arg1 = (ccapi::Event *) 0 ;
  std::vector< ccapi::Message > *arg2 = 0 ;
  
  arg1 = *(ccapi::Event **)&_swig_go_0; 
  arg2 = *(std::vector< ccapi::Message > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->addMessages((std::vector< ccapi::Message > const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Event_addMessages__SWIG_1_ccapi_00042a34e9364138(ccapi::Event *_swig_go_0, std::vector< ccapi::Message > *_swig_go_1) {
  ccapi::Event *arg1 = (ccapi::Event *) 0 ;
  std::vector< ccapi::Message > *arg2 = 0 ;
  
  arg1 = *(ccapi::Event **)&_swig_go_0; 
  arg2 = *(std::vector< ccapi::Message > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->addMessages(*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Event_addMessage__SWIG_0_ccapi_00042a34e9364138(ccapi::Event *_swig_go_0, ccapi::Message *_swig_go_1) {
  ccapi::Event *arg1 = (ccapi::Event *) 0 ;
  ccapi::Message *arg2 = 0 ;
  
  arg1 = *(ccapi::Event **)&_swig_go_0; 
  arg2 = *(ccapi::Message **)&_swig_go_1; 
  
  {
    try {
      (arg1)->addMessage((ccapi::Message const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Event_addMessage__SWIG_1_ccapi_00042a34e9364138(ccapi::Event *_swig_go_0, ccapi::Message *_swig_go_1) {
  ccapi::Event *arg1 = (ccapi::Event *) 0 ;
  ccapi::Message *arg2 = 0 ;
  
  arg1 = *(ccapi::Event **)&_swig_go_0; 
  arg2 = *(ccapi::Message **)&_swig_go_1; 
  
  {
    try {
      (arg1)->addMessage(*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Event_setMessageList__SWIG_0_ccapi_00042a34e9364138(ccapi::Event *_swig_go_0, std::vector< ccapi::Message > *_swig_go_1) {
  ccapi::Event *arg1 = (ccapi::Event *) 0 ;
  std::vector< ccapi::Message > *arg2 = 0 ;
  
  arg1 = *(ccapi::Event **)&_swig_go_0; 
  arg2 = *(std::vector< ccapi::Message > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->setMessageList((std::vector< ccapi::Message > const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Event_setMessageList__SWIG_1_ccapi_00042a34e9364138(ccapi::Event *_swig_go_0, std::vector< ccapi::Message > *_swig_go_1) {
  ccapi::Event *arg1 = (ccapi::Event *) 0 ;
  std::vector< ccapi::Message > *arg2 = 0 ;
  
  arg1 = *(ccapi::Event **)&_swig_go_0; 
  arg2 = *(std::vector< ccapi::Message > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->setMessageList(*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


intgo _wrap_Event_getType_ccapi_00042a34e9364138(ccapi::Event *_swig_go_0) {
  ccapi::Event *arg1 = (ccapi::Event *) 0 ;
  ccapi::Event::Type result;
  intgo _swig_go_result;
  
  arg1 = *(ccapi::Event **)&_swig_go_0; 
  
  {
    try {
      result = (ccapi::Event::Type)((ccapi::Event const *)arg1)->getType();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


void _wrap_Event_setType_ccapi_00042a34e9364138(ccapi::Event *_swig_go_0, intgo _swig_go_1) {
  ccapi::Event *arg1 = (ccapi::Event *) 0 ;
  ccapi::Event::Type arg2 ;
  
  arg1 = *(ccapi::Event **)&_swig_go_0; 
  arg2 = (ccapi::Event::Type)_swig_go_1; 
  
  {
    try {
      (arg1)->setType(arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


ccapi::Event *_wrap_new_Event_ccapi_00042a34e9364138() {
  ccapi::Event *result = 0 ;
  ccapi::Event *_swig_go_result;
  
  
  {
    try {
      result = (ccapi::Event *)new ccapi::Event();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::Event **)&_swig_go_result = (ccapi::Event *)result; 
  return _swig_go_result;
}


void _wrap_delete_Event_ccapi_00042a34e9364138(ccapi::Event *_swig_go_0) {
  ccapi::Event *arg1 = (ccapi::Event *) 0 ;
  
  arg1 = *(ccapi::Event **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


ccapi::EventHandler *_wrap__swig_NewDirectorEventHandlerEventHandler_ccapi_00042a34e9364138(intgo _swig_go_0) {
  int arg1 ;
  ccapi::EventHandler *result = 0 ;
  ccapi::EventHandler *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  {
    try {
      result = new SwigDirector_EventHandler(arg1);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::EventHandler **)&_swig_go_result = (ccapi::EventHandler *)result; 
  return _swig_go_result;
}


void _wrap_DeleteDirectorEventHandler_ccapi_00042a34e9364138(ccapi::EventHandler *_swig_go_0) {
  ccapi::EventHandler *arg1 = (ccapi::EventHandler *) 0 ;
  
  arg1 = *(ccapi::EventHandler **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


bool _wrap__swig_DirectorEventHandler_upcall_ProcessEvent_ccapi_00042a34e9364138(SwigDirector_EventHandler *_swig_go_0, ccapi::Event *_swig_go_1, ccapi::Session *_swig_go_2) {
  SwigDirector_EventHandler *arg1 = (SwigDirector_EventHandler *) 0 ;
  ccapi::Event *arg2 = 0 ;
  ccapi::Session *arg3 = (ccapi::Session *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(SwigDirector_EventHandler **)&_swig_go_0; 
  arg2 = *(ccapi::Event **)&_swig_go_1; 
  arg3 = *(ccapi::Session **)&_swig_go_2; 
  
  {
    try {
      result = (bool)arg1->_swig_upcall_processEvent(*arg2, arg3);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_EventHandler_ccapi_00042a34e9364138(ccapi::EventHandler *_swig_go_0) {
  ccapi::EventHandler *arg1 = (ccapi::EventHandler *) 0 ;
  
  arg1 = *(ccapi::EventHandler **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


bool _wrap_EventHandler_processEvent_ccapi_00042a34e9364138(ccapi::EventHandler *_swig_go_0, ccapi::Event *_swig_go_1, ccapi::Session *_swig_go_2) {
  ccapi::EventHandler *arg1 = (ccapi::EventHandler *) 0 ;
  ccapi::Event *arg2 = 0 ;
  ccapi::Session *arg3 = (ccapi::Session *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(ccapi::EventHandler **)&_swig_go_0; 
  arg2 = *(ccapi::Event **)&_swig_go_1; 
  arg3 = *(ccapi::Session **)&_swig_go_2; 
  
  {
    try {
      result = (bool)(arg1)->processEvent((ccapi::Event const &)*arg2,arg3);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


ccapi::EventHandler *_wrap_new_EventHandler_ccapi_00042a34e9364138() {
  ccapi::EventHandler *result = 0 ;
  ccapi::EventHandler *_swig_go_result;
  
  
  {
    try {
      result = (ccapi::EventHandler *)new ccapi::EventHandler();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::EventHandler **)&_swig_go_result = (ccapi::EventHandler *)result; 
  return _swig_go_result;
}


ccapi::EventDispatcher *_wrap_new_EventDispatcher__SWIG_0_ccapi_00042a34e9364138(intgo _swig_go_0) {
  int arg1 ;
  ccapi::EventDispatcher *result = 0 ;
  ccapi::EventDispatcher *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  {
    try {
      result = (ccapi::EventDispatcher *)new ccapi::EventDispatcher(arg1);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::EventDispatcher **)&_swig_go_result = (ccapi::EventDispatcher *)result; 
  return _swig_go_result;
}


ccapi::EventDispatcher *_wrap_new_EventDispatcher__SWIG_1_ccapi_00042a34e9364138() {
  ccapi::EventDispatcher *result = 0 ;
  ccapi::EventDispatcher *_swig_go_result;
  
  
  {
    try {
      result = (ccapi::EventDispatcher *)new ccapi::EventDispatcher();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::EventDispatcher **)&_swig_go_result = (ccapi::EventDispatcher *)result; 
  return _swig_go_result;
}


void _wrap_delete_EventDispatcher_ccapi_00042a34e9364138(ccapi::EventDispatcher *_swig_go_0) {
  ccapi::EventDispatcher *arg1 = (ccapi::EventDispatcher *) 0 ;
  
  arg1 = *(ccapi::EventDispatcher **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_EventDispatcher_dispatch_ccapi_00042a34e9364138(ccapi::EventDispatcher *_swig_go_0, std::function< void () > *_swig_go_1) {
  ccapi::EventDispatcher *arg1 = (ccapi::EventDispatcher *) 0 ;
  std::function< void () > *arg2 = 0 ;
  
  arg1 = *(ccapi::EventDispatcher **)&_swig_go_0; 
  arg2 = *(std::function< void () > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->dispatch((std::function< void () > const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_EventDispatcher_start_ccapi_00042a34e9364138(ccapi::EventDispatcher *_swig_go_0) {
  ccapi::EventDispatcher *arg1 = (ccapi::EventDispatcher *) 0 ;
  
  arg1 = *(ccapi::EventDispatcher **)&_swig_go_0; 
  
  {
    try {
      (arg1)->start();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_EventDispatcher_resume_ccapi_00042a34e9364138(ccapi::EventDispatcher *_swig_go_0) {
  ccapi::EventDispatcher *arg1 = (ccapi::EventDispatcher *) 0 ;
  
  arg1 = *(ccapi::EventDispatcher **)&_swig_go_0; 
  
  {
    try {
      (arg1)->resume();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_EventDispatcher_pause_ccapi_00042a34e9364138(ccapi::EventDispatcher *_swig_go_0) {
  ccapi::EventDispatcher *arg1 = (ccapi::EventDispatcher *) 0 ;
  
  arg1 = *(ccapi::EventDispatcher **)&_swig_go_0; 
  
  {
    try {
      (arg1)->pause();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_EventDispatcher_stop_ccapi_00042a34e9364138(ccapi::EventDispatcher *_swig_go_0) {
  ccapi::EventDispatcher *arg1 = (ccapi::EventDispatcher *) 0 ;
  
  arg1 = *(ccapi::EventDispatcher **)&_swig_go_0; 
  
  {
    try {
      (arg1)->stop();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


ccapi::Subscription *_wrap_new_Subscription__SWIG_0_ccapi_00042a34e9364138() {
  ccapi::Subscription *result = 0 ;
  ccapi::Subscription *_swig_go_result;
  
  
  {
    try {
      result = (ccapi::Subscription *)new ccapi::Subscription();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::Subscription **)&_swig_go_result = (ccapi::Subscription *)result; 
  return _swig_go_result;
}


ccapi::Subscription *_wrap_new_Subscription__SWIG_1_ccapi_00042a34e9364138(_gostring_ _swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4, std::map< std::string,std::string,std::less< std::string > > *_swig_go_5) {
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::map< std::string,std::string,std::less< std::string > > arg6 ;
  std::map< std::string,std::string,std::less< std::string > > *argp6 ;
  ccapi::Subscription *result = 0 ;
  ccapi::Subscription *_swig_go_result;
  
  (&arg1)->assign(_swig_go_0.p, _swig_go_0.n); 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  (&arg3)->assign(_swig_go_2.p, _swig_go_2.n); 
  (&arg4)->assign(_swig_go_3.p, _swig_go_3.n); 
  (&arg5)->assign(_swig_go_4.p, _swig_go_4.n); 
  
  argp6 = (std::map< std::string,std::string,std::less< std::string > > *)_swig_go_5;
  if (argp6 == NULL) {
    _swig_gopanic("Attempt to dereference null std::map< std::string,std::string,std::less< std::string > >");
  }
  arg6 = (std::map< std::string,std::string,std::less< std::string > >)*argp6;
  
  
  {
    try {
      result = (ccapi::Subscription *)new ccapi::Subscription(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4),SWIG_STD_MOVE(arg5),SWIG_STD_MOVE(arg6));
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::Subscription **)&_swig_go_result = (ccapi::Subscription *)result; 
  return _swig_go_result;
}


ccapi::Subscription *_wrap_new_Subscription__SWIG_2_ccapi_00042a34e9364138(_gostring_ _swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4) {
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  ccapi::Subscription *result = 0 ;
  ccapi::Subscription *_swig_go_result;
  
  (&arg1)->assign(_swig_go_0.p, _swig_go_0.n); 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  (&arg3)->assign(_swig_go_2.p, _swig_go_2.n); 
  (&arg4)->assign(_swig_go_3.p, _swig_go_3.n); 
  (&arg5)->assign(_swig_go_4.p, _swig_go_4.n); 
  
  {
    try {
      result = (ccapi::Subscription *)new ccapi::Subscription(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4),SWIG_STD_MOVE(arg5));
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::Subscription **)&_swig_go_result = (ccapi::Subscription *)result; 
  return _swig_go_result;
}


ccapi::Subscription *_wrap_new_Subscription__SWIG_3_ccapi_00042a34e9364138(_gostring_ _swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  ccapi::Subscription *result = 0 ;
  ccapi::Subscription *_swig_go_result;
  
  (&arg1)->assign(_swig_go_0.p, _swig_go_0.n); 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  (&arg3)->assign(_swig_go_2.p, _swig_go_2.n); 
  (&arg4)->assign(_swig_go_3.p, _swig_go_3.n); 
  
  {
    try {
      result = (ccapi::Subscription *)new ccapi::Subscription(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4));
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::Subscription **)&_swig_go_result = (ccapi::Subscription *)result; 
  return _swig_go_result;
}


ccapi::Subscription *_wrap_new_Subscription__SWIG_4_ccapi_00042a34e9364138(_gostring_ _swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  ccapi::Subscription *result = 0 ;
  ccapi::Subscription *_swig_go_result;
  
  (&arg1)->assign(_swig_go_0.p, _swig_go_0.n); 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  (&arg3)->assign(_swig_go_2.p, _swig_go_2.n); 
  
  {
    try {
      result = (ccapi::Subscription *)new ccapi::Subscription(SWIG_STD_MOVE(arg1),SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::Subscription **)&_swig_go_result = (ccapi::Subscription *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_Subscription_toString_ccapi_00042a34e9364138(ccapi::Subscription *_swig_go_0) {
  ccapi::Subscription *arg1 = (ccapi::Subscription *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Subscription **)&_swig_go_0; 
  
  {
    try {
      result = ((ccapi::Subscription const *)arg1)->toString();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Subscription_getCorrelationId_ccapi_00042a34e9364138(ccapi::Subscription *_swig_go_0) {
  ccapi::Subscription *arg1 = (ccapi::Subscription *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Subscription **)&_swig_go_0; 
  
  {
    try {
      result = (std::string *) &((ccapi::Subscription const *)arg1)->getCorrelationId();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Subscription_getExchange_ccapi_00042a34e9364138(ccapi::Subscription *_swig_go_0) {
  ccapi::Subscription *arg1 = (ccapi::Subscription *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Subscription **)&_swig_go_0; 
  
  {
    try {
      result = (std::string *) &((ccapi::Subscription const *)arg1)->getExchange();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Subscription_getInstrument_ccapi_00042a34e9364138(ccapi::Subscription *_swig_go_0) {
  ccapi::Subscription *arg1 = (ccapi::Subscription *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Subscription **)&_swig_go_0; 
  
  {
    try {
      result = (std::string *) &((ccapi::Subscription const *)arg1)->getInstrument();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Subscription_getInstrumentType_ccapi_00042a34e9364138(ccapi::Subscription *_swig_go_0) {
  ccapi::Subscription *arg1 = (ccapi::Subscription *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Subscription **)&_swig_go_0; 
  
  {
    try {
      result = (std::string *) &((ccapi::Subscription const *)arg1)->getInstrumentType();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Subscription_getField_ccapi_00042a34e9364138(ccapi::Subscription *_swig_go_0) {
  ccapi::Subscription *arg1 = (ccapi::Subscription *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Subscription **)&_swig_go_0; 
  
  {
    try {
      result = (std::string *) &((ccapi::Subscription const *)arg1)->getField();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Subscription_getRawOptions_ccapi_00042a34e9364138(ccapi::Subscription *_swig_go_0) {
  ccapi::Subscription *arg1 = (ccapi::Subscription *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Subscription **)&_swig_go_0; 
  
  {
    try {
      result = (std::string *) &((ccapi::Subscription const *)arg1)->getRawOptions();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


std::map< std::string,std::string,std::less< std::string > > *_wrap_Subscription_getOptionMap_ccapi_00042a34e9364138(ccapi::Subscription *_swig_go_0) {
  ccapi::Subscription *arg1 = (ccapi::Subscription *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *result = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(ccapi::Subscription **)&_swig_go_0; 
  
  {
    try {
      result = (std::map< std::string,std::string,std::less< std::string > > *) &((ccapi::Subscription const *)arg1)->getOptionMap();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_result = result; 
  return _swig_go_result;
}


std::map< std::string,std::string,std::less< std::string > > *_wrap_Subscription_getCredential_ccapi_00042a34e9364138(ccapi::Subscription *_swig_go_0) {
  ccapi::Subscription *arg1 = (ccapi::Subscription *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *result = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(ccapi::Subscription **)&_swig_go_0; 
  
  {
    try {
      result = (std::map< std::string,std::string,std::less< std::string > > *) &((ccapi::Subscription const *)arg1)->getCredential();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_Subscription_getServiceName_ccapi_00042a34e9364138(ccapi::Subscription *_swig_go_0) {
  ccapi::Subscription *arg1 = (ccapi::Subscription *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Subscription **)&_swig_go_0; 
  
  {
    try {
      result = (std::string *) &((ccapi::Subscription const *)arg1)->getServiceName();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


std::set< std::string > *_wrap_Subscription_getInstrumentSet_ccapi_00042a34e9364138(ccapi::Subscription *_swig_go_0) {
  ccapi::Subscription *arg1 = (ccapi::Subscription *) 0 ;
  std::set< std::string > *result = 0 ;
  std::set< std::string > *_swig_go_result;
  
  arg1 = *(ccapi::Subscription **)&_swig_go_0; 
  
  {
    try {
      result = (std::set< std::string > *) &((ccapi::Subscription const *)arg1)->getInstrumentSet();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::set< std::string > **)&_swig_go_result = result; 
  return _swig_go_result;
}


std::set< std::string > *_wrap_Subscription_getFieldSet_ccapi_00042a34e9364138(ccapi::Subscription *_swig_go_0) {
  ccapi::Subscription *arg1 = (ccapi::Subscription *) 0 ;
  std::set< std::string > *result = 0 ;
  std::set< std::string > *_swig_go_result;
  
  arg1 = *(ccapi::Subscription **)&_swig_go_0; 
  
  {
    try {
      result = (std::set< std::string > *) &((ccapi::Subscription const *)arg1)->getFieldSet();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::set< std::string > **)&_swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_Subscription_getSerializedOptions_ccapi_00042a34e9364138(ccapi::Subscription *_swig_go_0) {
  ccapi::Subscription *arg1 = (ccapi::Subscription *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Subscription **)&_swig_go_0; 
  
  {
    try {
      result = ((ccapi::Subscription const *)arg1)->getSerializedOptions();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Subscription_getSerializedCredential_ccapi_00042a34e9364138(ccapi::Subscription *_swig_go_0) {
  ccapi::Subscription *arg1 = (ccapi::Subscription *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Subscription **)&_swig_go_0; 
  
  {
    try {
      result = ((ccapi::Subscription const *)arg1)->getSerializedCredential();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


std::chrono::time_point< std::chrono::system_clock,std::chrono::nanoseconds > *_wrap_Subscription_getTimeSent_ccapi_00042a34e9364138(ccapi::Subscription *_swig_go_0) {
  ccapi::Subscription *arg1 = (ccapi::Subscription *) 0 ;
  ccapi::TimePoint result;
  std::chrono::time_point< std::chrono::system_clock,std::chrono::nanoseconds > *_swig_go_result;
  
  arg1 = *(ccapi::Subscription **)&_swig_go_0; 
  
  {
    try {
      result = ((ccapi::Subscription const *)arg1)->getTimeSent();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::TimePoint **)&_swig_go_result = new ccapi::TimePoint(result); 
  return _swig_go_result;
}


_gostring_ _wrap_Subscription_getTimeSentISO_ccapi_00042a34e9364138(ccapi::Subscription *_swig_go_0) {
  ccapi::Subscription *arg1 = (ccapi::Subscription *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Subscription **)&_swig_go_0; 
  
  {
    try {
      result = ((ccapi::Subscription const *)arg1)->getTimeSentISO();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


std::pair< long long,long long > *_wrap_Subscription_getTimeSentPair_ccapi_00042a34e9364138(ccapi::Subscription *_swig_go_0) {
  ccapi::Subscription *arg1 = (ccapi::Subscription *) 0 ;
  std::pair< long long,long long > result;
  std::pair< long long,long long > *_swig_go_result;
  
  arg1 = *(ccapi::Subscription **)&_swig_go_0; 
  
  {
    try {
      result = ((ccapi::Subscription const *)arg1)->getTimeSentPair();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::pair< long long,long long > **)&_swig_go_result = new std::pair< long long,long long >(result); 
  return _swig_go_result;
}


_gostring_ _wrap_Subscription_getMarginType_ccapi_00042a34e9364138(ccapi::Subscription *_swig_go_0) {
  ccapi::Subscription *arg1 = (ccapi::Subscription *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Subscription **)&_swig_go_0; 
  
  {
    try {
      result = (std::string *) &((ccapi::Subscription const *)arg1)->getMarginType();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_Subscription_setTimeSent_ccapi_00042a34e9364138(ccapi::Subscription *_swig_go_0, std::chrono::time_point< std::chrono::system_clock,std::chrono::nanoseconds > *_swig_go_1) {
  ccapi::Subscription *arg1 = (ccapi::Subscription *) 0 ;
  ccapi::TimePoint arg2 ;
  ccapi::TimePoint *argp2 ;
  
  arg1 = *(ccapi::Subscription **)&_swig_go_0; 
  
  argp2 = (ccapi::TimePoint *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null ccapi::TimePoint");
  }
  arg2 = (ccapi::TimePoint)*argp2;
  
  
  {
    try {
      (arg1)->setTimeSent(SWIG_STD_MOVE(arg2));
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Subscription_setInstrumentType_ccapi_00042a34e9364138(ccapi::Subscription *_swig_go_0, _gostring_ _swig_go_1) {
  ccapi::Subscription *arg1 = (ccapi::Subscription *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(ccapi::Subscription **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      (arg1)->setInstrumentType((std::string const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Subscription_setMarginType_ccapi_00042a34e9364138(ccapi::Subscription *_swig_go_0, _gostring_ _swig_go_1) {
  ccapi::Subscription *arg1 = (ccapi::Subscription *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(ccapi::Subscription **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      (arg1)->setMarginType((std::string const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


intgo _wrap_Status_UNKNOWN_Subscription_ccapi_00042a34e9364138() {
  ccapi::Subscription::Status result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Subscription::Status::UNKNOWN;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Status_SUBSCRIBING_Subscription_ccapi_00042a34e9364138() {
  ccapi::Subscription::Status result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Subscription::Status::SUBSCRIBING;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Status_SUBSCRIBED_Subscription_ccapi_00042a34e9364138() {
  ccapi::Subscription::Status result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Subscription::Status::SUBSCRIBED;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Status_UNSUBSCRIBING_Subscription_ccapi_00042a34e9364138() {
  ccapi::Subscription::Status result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Subscription::Status::UNSUBSCRIBING;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Status_UNSUBSCRIBED_Subscription_ccapi_00042a34e9364138() {
  ccapi::Subscription::Status result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Subscription::Status::UNSUBSCRIBED;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


_gostring_ _wrap_Subscription_statusToString_ccapi_00042a34e9364138(intgo _swig_go_0) {
  ccapi::Subscription::Status arg1 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = (ccapi::Subscription::Status)_swig_go_0; 
  
  {
    try {
      result = ccapi::Subscription::statusToString(arg1);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


void _wrap_delete_Subscription_ccapi_00042a34e9364138(ccapi::Subscription *_swig_go_0) {
  ccapi::Subscription *arg1 = (ccapi::Subscription *) 0 ;
  
  arg1 = *(ccapi::Subscription **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


intgo _wrap_Operation_CUSTOM_Request_ccapi_00042a34e9364138() {
  ccapi::Request::Operation result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Request::Operation::CUSTOM;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Operation_GENERIC_PUBLIC_REQUEST_Request_ccapi_00042a34e9364138() {
  ccapi::Request::Operation result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Request::Operation::GENERIC_PUBLIC_REQUEST;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Operation_GENERIC_PRIVATE_REQUEST_Request_ccapi_00042a34e9364138() {
  ccapi::Request::Operation result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Request::Operation::GENERIC_PRIVATE_REQUEST;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Operation_FIX_Request_ccapi_00042a34e9364138() {
  ccapi::Request::Operation result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Request::Operation::FIX;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Operation_GET_RECENT_TRADES_Request_ccapi_00042a34e9364138() {
  ccapi::Request::Operation result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Request::Operation::GET_RECENT_TRADES;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Operation_GET_HISTORICAL_TRADES_Request_ccapi_00042a34e9364138() {
  ccapi::Request::Operation result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Request::Operation::GET_HISTORICAL_TRADES;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Operation_GET_RECENT_AGG_TRADES_Request_ccapi_00042a34e9364138() {
  ccapi::Request::Operation result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Request::Operation::GET_RECENT_AGG_TRADES;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Operation_GET_HISTORICAL_AGG_TRADES_Request_ccapi_00042a34e9364138() {
  ccapi::Request::Operation result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Request::Operation::GET_HISTORICAL_AGG_TRADES;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Operation_GET_RECENT_CANDLESTICKS_Request_ccapi_00042a34e9364138() {
  ccapi::Request::Operation result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Request::Operation::GET_RECENT_CANDLESTICKS;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Operation_GET_HISTORICAL_CANDLESTICKS_Request_ccapi_00042a34e9364138() {
  ccapi::Request::Operation result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Request::Operation::GET_HISTORICAL_CANDLESTICKS;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Operation_GET_MARKET_DEPTH_Request_ccapi_00042a34e9364138() {
  ccapi::Request::Operation result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Request::Operation::GET_MARKET_DEPTH;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Operation_GET_INSTRUMENT_Request_ccapi_00042a34e9364138() {
  ccapi::Request::Operation result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Request::Operation::GET_INSTRUMENT;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Operation_GET_INSTRUMENTS_Request_ccapi_00042a34e9364138() {
  ccapi::Request::Operation result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Request::Operation::GET_INSTRUMENTS;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Operation_CREATE_ORDER_Request_ccapi_00042a34e9364138() {
  ccapi::Request::Operation result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Request::Operation::CREATE_ORDER;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Operation_CANCEL_ORDER_Request_ccapi_00042a34e9364138() {
  ccapi::Request::Operation result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Request::Operation::CANCEL_ORDER;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Operation_GET_ORDER_Request_ccapi_00042a34e9364138() {
  ccapi::Request::Operation result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Request::Operation::GET_ORDER;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Operation_GET_OPEN_ORDERS_Request_ccapi_00042a34e9364138() {
  ccapi::Request::Operation result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Request::Operation::GET_OPEN_ORDERS;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Operation_CANCEL_OPEN_ORDERS_Request_ccapi_00042a34e9364138() {
  ccapi::Request::Operation result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Request::Operation::CANCEL_OPEN_ORDERS;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Operation_GET_ACCOUNTS_Request_ccapi_00042a34e9364138() {
  ccapi::Request::Operation result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Request::Operation::GET_ACCOUNTS;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Operation_GET_ACCOUNT_BALANCES_Request_ccapi_00042a34e9364138() {
  ccapi::Request::Operation result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Request::Operation::GET_ACCOUNT_BALANCES;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


intgo _wrap_Operation_GET_ACCOUNT_POSITIONS_Request_ccapi_00042a34e9364138() {
  ccapi::Request::Operation result;
  intgo _swig_go_result;
  
  
  {
    try {
      result = ccapi::Request::Operation::GET_ACCOUNT_POSITIONS;
      
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


_gostring_ _wrap_Request_operationToString_ccapi_00042a34e9364138(intgo _swig_go_0) {
  ccapi::Request::Operation arg1 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = (ccapi::Request::Operation)_swig_go_0; 
  
  {
    try {
      result = ccapi::Request::operationToString(arg1);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


ccapi::Request *_wrap_new_Request__SWIG_0_ccapi_00042a34e9364138() {
  ccapi::Request *result = 0 ;
  ccapi::Request *_swig_go_result;
  
  
  {
    try {
      result = (ccapi::Request *)new ccapi::Request();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::Request **)&_swig_go_result = (ccapi::Request *)result; 
  return _swig_go_result;
}


ccapi::Request *_wrap_new_Request__SWIG_1_ccapi_00042a34e9364138(intgo _swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3, std::map< std::string,std::string,std::less< std::string > > *_swig_go_4) {
  ccapi::Request::Operation arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::map< std::string,std::string,std::less< std::string > > arg5 ;
  std::map< std::string,std::string,std::less< std::string > > *argp5 ;
  ccapi::Request *result = 0 ;
  ccapi::Request *_swig_go_result;
  
  arg1 = (ccapi::Request::Operation)_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  (&arg3)->assign(_swig_go_2.p, _swig_go_2.n); 
  (&arg4)->assign(_swig_go_3.p, _swig_go_3.n); 
  
  argp5 = (std::map< std::string,std::string,std::less< std::string > > *)_swig_go_4;
  if (argp5 == NULL) {
    _swig_gopanic("Attempt to dereference null std::map< std::string,std::string,std::less< std::string > >");
  }
  arg5 = (std::map< std::string,std::string,std::less< std::string > >)*argp5;
  
  
  {
    try {
      result = (ccapi::Request *)new ccapi::Request(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4),SWIG_STD_MOVE(arg5));
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::Request **)&_swig_go_result = (ccapi::Request *)result; 
  return _swig_go_result;
}


ccapi::Request *_wrap_new_Request__SWIG_2_ccapi_00042a34e9364138(intgo _swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3) {
  ccapi::Request::Operation arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  ccapi::Request *result = 0 ;
  ccapi::Request *_swig_go_result;
  
  arg1 = (ccapi::Request::Operation)_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  (&arg3)->assign(_swig_go_2.p, _swig_go_2.n); 
  (&arg4)->assign(_swig_go_3.p, _swig_go_3.n); 
  
  {
    try {
      result = (ccapi::Request *)new ccapi::Request(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4));
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::Request **)&_swig_go_result = (ccapi::Request *)result; 
  return _swig_go_result;
}


ccapi::Request *_wrap_new_Request__SWIG_3_ccapi_00042a34e9364138(intgo _swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2) {
  ccapi::Request::Operation arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  ccapi::Request *result = 0 ;
  ccapi::Request *_swig_go_result;
  
  arg1 = (ccapi::Request::Operation)_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  (&arg3)->assign(_swig_go_2.p, _swig_go_2.n); 
  
  {
    try {
      result = (ccapi::Request *)new ccapi::Request(arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::Request **)&_swig_go_result = (ccapi::Request *)result; 
  return _swig_go_result;
}


ccapi::Request *_wrap_new_Request__SWIG_4_ccapi_00042a34e9364138(intgo _swig_go_0, _gostring_ _swig_go_1) {
  ccapi::Request::Operation arg1 ;
  std::string arg2 ;
  ccapi::Request *result = 0 ;
  ccapi::Request *_swig_go_result;
  
  arg1 = (ccapi::Request::Operation)_swig_go_0; 
  (&arg2)->assign(_swig_go_1.p, _swig_go_1.n); 
  
  {
    try {
      result = (ccapi::Request *)new ccapi::Request(arg1,SWIG_STD_MOVE(arg2));
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::Request **)&_swig_go_result = (ccapi::Request *)result; 
  return _swig_go_result;
}


_gostring_ _wrap_Request_toString_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  
  {
    try {
      result = ((ccapi::Request const *)arg1)->toString();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Request_getCorrelationId_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  
  {
    try {
      result = (std::string *) &((ccapi::Request const *)arg1)->getCorrelationId();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Request_getSecondaryCorrelationId_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  
  {
    try {
      result = (std::string *) &((ccapi::Request const *)arg1)->getSecondaryCorrelationId();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Request_getExchange_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  
  {
    try {
      result = (std::string *) &((ccapi::Request const *)arg1)->getExchange();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Request_getMarginType_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  
  {
    try {
      result = (std::string *) &((ccapi::Request const *)arg1)->getMarginType();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Request_getInstrument_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  
  {
    try {
      result = (std::string *) &((ccapi::Request const *)arg1)->getInstrument();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


std::map< std::string,std::string,std::less< std::string > > *_wrap_Request_getCredential_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *result = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  
  {
    try {
      result = (std::map< std::string,std::string,std::less< std::string > > *) &((ccapi::Request const *)arg1)->getCredential();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_Request_getServiceName_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  
  {
    try {
      result = (std::string *) &((ccapi::Request const *)arg1)->getServiceName();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_Request_appendParam_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0, std::map< std::string,std::string,std::less< std::string > > *_swig_go_1) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = 0 ;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  arg2 = *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->appendParam((std::map< std::string,std::string,std::less< std::string > > const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Request_appendParamFix_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0, std::vector< std::pair< int,std::string > > *_swig_go_1) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  std::vector< std::pair< int,std::string > > *arg2 = 0 ;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  arg2 = *(std::vector< std::pair< int,std::string > > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->appendParamFix((std::vector< std::pair< int,std::string > > const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Request_appendParamListFix_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0, std::vector< std::vector< std::pair< int,std::string > > > *_swig_go_1) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  std::vector< std::vector< std::pair< int,std::string > > > *arg2 = 0 ;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  arg2 = *(std::vector< std::vector< std::pair< int,std::string > > > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->appendParamListFix((std::vector< std::vector< std::pair< int,std::string > > > const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Request_setParamListFix_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0, std::vector< std::vector< std::pair< int,std::string > > > *_swig_go_1) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  std::vector< std::vector< std::pair< int,std::string > > > *arg2 = 0 ;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  arg2 = *(std::vector< std::vector< std::pair< int,std::string > > > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->setParamListFix((std::vector< std::vector< std::pair< int,std::string > > > const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


intgo _wrap_Request_getOperation_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  ccapi::Request::Operation result;
  intgo _swig_go_result;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  
  {
    try {
      result = (ccapi::Request::Operation)((ccapi::Request const *)arg1)->getOperation();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = (intgo)result; 
  return _swig_go_result;
}


std::vector< std::map< std::string,std::string,std::less< std::string > > > *_wrap_Request_getParamList_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  std::vector< std::map< std::string,std::string,std::less< std::string > > > *result = 0 ;
  std::vector< std::map< std::string,std::string,std::less< std::string > > > *_swig_go_result;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  
  {
    try {
      result = (std::vector< std::map< std::string,std::string,std::less< std::string > > > *) &((ccapi::Request const *)arg1)->getParamList();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::vector< std::map< std::string,std::string,std::less< std::string > > > **)&_swig_go_result = result; 
  return _swig_go_result;
}


std::vector< std::vector< std::pair< int,std::string > > > *_wrap_Request_getParamListFix_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  std::vector< std::vector< std::pair< int,std::string > > > *result = 0 ;
  std::vector< std::vector< std::pair< int,std::string > > > *_swig_go_result;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  
  {
    try {
      result = (std::vector< std::vector< std::pair< int,std::string > > > *) &((ccapi::Request const *)arg1)->getParamListFix();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::vector< std::vector< std::pair< int,std::string > > > **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Request_setParamList_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0, std::vector< std::map< std::string,std::string,std::less< std::string > > > *_swig_go_1) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  std::vector< std::map< std::string,std::string,std::less< std::string > > > *arg2 = 0 ;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  arg2 = *(std::vector< std::map< std::string,std::string,std::less< std::string > > > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->setParamList((std::vector< std::map< std::string,std::string,std::less< std::string > > > const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


std::map< std::string,std::string,std::less< std::string > > *_wrap_Request_getFirstParamWithDefault__SWIG_0_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0, std::map< std::string,std::string,std::less< std::string > > *_swig_go_1) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > arg2 ;
  std::map< std::string,std::string,std::less< std::string > > const *argp2 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  std::map< std::string,std::string,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  
  argp2 = (std::map< std::string,std::string,std::less< std::string > > *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null std::map< std::string,std::string,std::less< std::string > > const");
  }
  arg2 = (std::map< std::string,std::string,std::less< std::string > >)*argp2;
  
  
  {
    try {
      result = ((ccapi::Request const *)arg1)->getFirstParamWithDefault(SWIG_STD_MOVE(arg2));
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_result = new std::map< std::string,std::string,std::less< std::string > >(result); 
  return _swig_go_result;
}


std::map< std::string,std::string,std::less< std::string > > *_wrap_Request_getFirstParamWithDefault__SWIG_1_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  std::map< std::string,std::string,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  
  {
    try {
      result = ((ccapi::Request const *)arg1)->getFirstParamWithDefault();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_result = new std::map< std::string,std::string,std::less< std::string > >(result); 
  return _swig_go_result;
}


std::chrono::time_point< std::chrono::system_clock,std::chrono::nanoseconds > *_wrap_Request_getTimeSent_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  ccapi::TimePoint result;
  std::chrono::time_point< std::chrono::system_clock,std::chrono::nanoseconds > *_swig_go_result;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  
  {
    try {
      result = ((ccapi::Request const *)arg1)->getTimeSent();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::TimePoint **)&_swig_go_result = new ccapi::TimePoint(result); 
  return _swig_go_result;
}


_gostring_ _wrap_Request_getTimeSentISO_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  
  {
    try {
      result = ((ccapi::Request const *)arg1)->getTimeSentISO();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


std::pair< long long,long long > *_wrap_Request_getTimeSentPair_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  std::pair< long long,long long > result;
  std::pair< long long,long long > *_swig_go_result;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  
  {
    try {
      result = ((ccapi::Request const *)arg1)->getTimeSentPair();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::pair< long long,long long > **)&_swig_go_result = new std::pair< long long,long long >(result); 
  return _swig_go_result;
}


void _wrap_Request_setTimeSent_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0, std::chrono::time_point< std::chrono::system_clock,std::chrono::nanoseconds > *_swig_go_1) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  ccapi::TimePoint arg2 ;
  ccapi::TimePoint *argp2 ;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  
  argp2 = (ccapi::TimePoint *)_swig_go_1;
  if (argp2 == NULL) {
    _swig_gopanic("Attempt to dereference null ccapi::TimePoint");
  }
  arg2 = (ccapi::TimePoint)*argp2;
  
  
  {
    try {
      (arg1)->setTimeSent(SWIG_STD_MOVE(arg2));
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


intgo _wrap_Request_getIndex_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  
  {
    try {
      result = (int)((ccapi::Request const *)arg1)->getIndex();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


_gostring_ _wrap_Request_getLocalIpAddress_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  
  {
    try {
      result = (std::string *) &((ccapi::Request const *)arg1)->getLocalIpAddress();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Request_getBaseUrl_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  
  {
    try {
      result = (std::string *) &((ccapi::Request const *)arg1)->getBaseUrl();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Request_getHost_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  
  {
    try {
      result = (std::string *) &((ccapi::Request const *)arg1)->getHost();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


_gostring_ _wrap_Request_getPort_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  
  {
    try {
      result = (std::string *) &((ccapi::Request const *)arg1)->getPort();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_Request_setIndex_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0, intgo _swig_go_1) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  int arg2 ;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  {
    try {
      (arg1)->setIndex(arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Request_setCredential_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0, std::map< std::string,std::string,std::less< std::string > > *_swig_go_1) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = 0 ;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  arg2 = *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->setCredential((std::map< std::string,std::string,std::less< std::string > > const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Request_setCorrelationId_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0, _gostring_ _swig_go_1) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      (arg1)->setCorrelationId((std::string const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Request_setSecondaryCorrelationId_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0, _gostring_ _swig_go_1) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      (arg1)->setSecondaryCorrelationId((std::string const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Request_setMarginType_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0, _gostring_ _swig_go_1) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      (arg1)->setMarginType((std::string const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Request_setLocalIpAddress_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0, _gostring_ _swig_go_1) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      (arg1)->setLocalIpAddress((std::string const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Request_setBaseUrl_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0, _gostring_ _swig_go_1) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  {
    try {
      (arg1)->setBaseUrl((std::string const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Request_setBaseUrlParts_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  
  {
    try {
      (arg1)->setBaseUrlParts();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_delete_Request_ccapi_00042a34e9364138(ccapi::Request *_swig_go_0) {
  ccapi::Request *arg1 = (ccapi::Request *) 0 ;
  
  arg1 = *(ccapi::Request **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


_gostring_ _wrap_SessionOptions_toString_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  std::string result;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  
  {
    try {
      result = ((ccapi::SessionOptions const *)arg1)->toString();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = Swig_AllocateString((&result)->data(), (&result)->length()); 
  return _swig_go_result;
}


void _wrap_SessionOptions_enableCheckSequence_set_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0, bool _swig_go_1) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  bool arg2 ;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->enableCheckSequence = arg2;
  
}


bool _wrap_SessionOptions_enableCheckSequence_get_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  
  result = (bool) ((arg1)->enableCheckSequence);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SessionOptions_enableCheckOrderBookChecksum_set_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0, bool _swig_go_1) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  bool arg2 ;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->enableCheckOrderBookChecksum = arg2;
  
}


bool _wrap_SessionOptions_enableCheckOrderBookChecksum_get_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  
  result = (bool) ((arg1)->enableCheckOrderBookChecksum);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SessionOptions_enableCheckOrderBookCrossed_set_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0, bool _swig_go_1) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  bool arg2 ;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->enableCheckOrderBookCrossed = arg2;
  
}


bool _wrap_SessionOptions_enableCheckOrderBookCrossed_get_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  
  result = (bool) ((arg1)->enableCheckOrderBookCrossed);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SessionOptions_enableCheckPingPongWebsocketProtocolLevel_set_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0, bool _swig_go_1) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  bool arg2 ;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->enableCheckPingPongWebsocketProtocolLevel = arg2;
  
}


bool _wrap_SessionOptions_enableCheckPingPongWebsocketProtocolLevel_get_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  
  result = (bool) ((arg1)->enableCheckPingPongWebsocketProtocolLevel);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SessionOptions_enableCheckPingPongWebsocketApplicationLevel_set_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0, bool _swig_go_1) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  bool arg2 ;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->enableCheckPingPongWebsocketApplicationLevel = arg2;
  
}


bool _wrap_SessionOptions_enableCheckPingPongWebsocketApplicationLevel_get_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  
  result = (bool) ((arg1)->enableCheckPingPongWebsocketApplicationLevel);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SessionOptions_enableCheckHeartbeatFix_set_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0, bool _swig_go_1) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  bool arg2 ;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->enableCheckHeartbeatFix = arg2;
  
}


bool _wrap_SessionOptions_enableCheckHeartbeatFix_get_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  
  result = (bool) ((arg1)->enableCheckHeartbeatFix);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SessionOptions_pingWebsocketProtocolLevelIntervalMilliseconds_set_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0, long long _swig_go_1) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  long arg2 ;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  arg2 = (long)_swig_go_1; 
  
  if (arg1) (arg1)->pingWebsocketProtocolLevelIntervalMilliseconds = arg2;
  
}


long long _wrap_SessionOptions_pingWebsocketProtocolLevelIntervalMilliseconds_get_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  long result;
  long long _swig_go_result;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  
  result = (long) ((arg1)->pingWebsocketProtocolLevelIntervalMilliseconds);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SessionOptions_pongWebsocketProtocolLevelTimeoutMilliseconds_set_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0, long long _swig_go_1) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  long arg2 ;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  arg2 = (long)_swig_go_1; 
  
  if (arg1) (arg1)->pongWebsocketProtocolLevelTimeoutMilliseconds = arg2;
  
}


long long _wrap_SessionOptions_pongWebsocketProtocolLevelTimeoutMilliseconds_get_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  long result;
  long long _swig_go_result;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  
  result = (long) ((arg1)->pongWebsocketProtocolLevelTimeoutMilliseconds);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SessionOptions_pingWebsocketApplicationLevelIntervalMilliseconds_set_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0, long long _swig_go_1) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  long arg2 ;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  arg2 = (long)_swig_go_1; 
  
  if (arg1) (arg1)->pingWebsocketApplicationLevelIntervalMilliseconds = arg2;
  
}


long long _wrap_SessionOptions_pingWebsocketApplicationLevelIntervalMilliseconds_get_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  long result;
  long long _swig_go_result;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  
  result = (long) ((arg1)->pingWebsocketApplicationLevelIntervalMilliseconds);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SessionOptions_pongWebsocketApplicationLevelTimeoutMilliseconds_set_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0, long long _swig_go_1) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  long arg2 ;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  arg2 = (long)_swig_go_1; 
  
  if (arg1) (arg1)->pongWebsocketApplicationLevelTimeoutMilliseconds = arg2;
  
}


long long _wrap_SessionOptions_pongWebsocketApplicationLevelTimeoutMilliseconds_get_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  long result;
  long long _swig_go_result;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  
  result = (long) ((arg1)->pongWebsocketApplicationLevelTimeoutMilliseconds);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SessionOptions_heartbeatFixIntervalMilliseconds_set_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0, long long _swig_go_1) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  long arg2 ;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  arg2 = (long)_swig_go_1; 
  
  if (arg1) (arg1)->heartbeatFixIntervalMilliseconds = arg2;
  
}


long long _wrap_SessionOptions_heartbeatFixIntervalMilliseconds_get_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  long result;
  long long _swig_go_result;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  
  result = (long) ((arg1)->heartbeatFixIntervalMilliseconds);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SessionOptions_heartbeatFixTimeoutMilliseconds_set_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0, long long _swig_go_1) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  long arg2 ;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  arg2 = (long)_swig_go_1; 
  
  if (arg1) (arg1)->heartbeatFixTimeoutMilliseconds = arg2;
  
}


long long _wrap_SessionOptions_heartbeatFixTimeoutMilliseconds_get_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  long result;
  long long _swig_go_result;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  
  result = (long) ((arg1)->heartbeatFixTimeoutMilliseconds);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SessionOptions_maxEventQueueSize_set_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0, intgo _swig_go_1) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  int arg2 ;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->maxEventQueueSize = arg2;
  
}


intgo _wrap_SessionOptions_maxEventQueueSize_get_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  
  result = (int) ((arg1)->maxEventQueueSize);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SessionOptions_httpMaxNumRetry_set_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0, intgo _swig_go_1) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  int arg2 ;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->httpMaxNumRetry = arg2;
  
}


intgo _wrap_SessionOptions_httpMaxNumRetry_get_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  
  result = (int) ((arg1)->httpMaxNumRetry);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SessionOptions_httpMaxNumRedirect_set_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0, intgo _swig_go_1) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  int arg2 ;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->httpMaxNumRedirect = arg2;
  
}


intgo _wrap_SessionOptions_httpMaxNumRedirect_get_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  
  result = (int) ((arg1)->httpMaxNumRedirect);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SessionOptions_httpRequestTimeoutMilliseconds_set_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0, long long _swig_go_1) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  long arg2 ;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  arg2 = (long)_swig_go_1; 
  
  if (arg1) (arg1)->httpRequestTimeoutMilliseconds = arg2;
  
}


long long _wrap_SessionOptions_httpRequestTimeoutMilliseconds_get_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  long result;
  long long _swig_go_result;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  
  result = (long) ((arg1)->httpRequestTimeoutMilliseconds);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SessionOptions_httpConnectionPoolMaxSize_set_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0, intgo _swig_go_1) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  int arg2 ;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  arg2 = (int)_swig_go_1; 
  
  if (arg1) (arg1)->httpConnectionPoolMaxSize = arg2;
  
}


intgo _wrap_SessionOptions_httpConnectionPoolMaxSize_get_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  int result;
  intgo _swig_go_result;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  
  result = (int) ((arg1)->httpConnectionPoolMaxSize);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SessionOptions_httpConnectionKeepAliveTimeoutSeconds_set_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0, long long _swig_go_1) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  long arg2 ;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  arg2 = (long)_swig_go_1; 
  
  if (arg1) (arg1)->httpConnectionKeepAliveTimeoutSeconds = arg2;
  
}


long long _wrap_SessionOptions_httpConnectionKeepAliveTimeoutSeconds_get_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  long result;
  long long _swig_go_result;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  
  result = (long) ((arg1)->httpConnectionKeepAliveTimeoutSeconds);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SessionOptions_enableOneHttpConnectionPerRequest_set_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0, bool _swig_go_1) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  bool arg2 ;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  arg2 = (bool)_swig_go_1; 
  
  if (arg1) (arg1)->enableOneHttpConnectionPerRequest = arg2;
  
}


bool _wrap_SessionOptions_enableOneHttpConnectionPerRequest_get_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  
  result = (bool) ((arg1)->enableOneHttpConnectionPerRequest);
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SessionOptions_websocketConnectTimeoutMilliseconds_set_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0, long long _swig_go_1) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  long arg2 ;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  arg2 = (long)_swig_go_1; 
  
  if (arg1) (arg1)->websocketConnectTimeoutMilliseconds = arg2;
  
}


long long _wrap_SessionOptions_websocketConnectTimeoutMilliseconds_get_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  long result;
  long long _swig_go_result;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  
  result = (long) ((arg1)->websocketConnectTimeoutMilliseconds);
  _swig_go_result = result; 
  return _swig_go_result;
}


ccapi::SessionOptions *_wrap_new_SessionOptions_ccapi_00042a34e9364138() {
  ccapi::SessionOptions *result = 0 ;
  ccapi::SessionOptions *_swig_go_result;
  
  
  {
    try {
      result = (ccapi::SessionOptions *)new ccapi::SessionOptions();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::SessionOptions **)&_swig_go_result = (ccapi::SessionOptions *)result; 
  return _swig_go_result;
}


void _wrap_delete_SessionOptions_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0) {
  ccapi::SessionOptions *arg1 = (ccapi::SessionOptions *) 0 ;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


ccapi::SessionConfigs *_wrap_new_SessionConfigs__SWIG_0_ccapi_00042a34e9364138(std::map< std::string,std::string,std::less< std::string > > *_swig_go_0) {
  std::map< std::string,std::string,std::less< std::string > > arg1 ;
  std::map< std::string,std::string,std::less< std::string > > *argp1 ;
  ccapi::SessionConfigs *result = 0 ;
  ccapi::SessionConfigs *_swig_go_result;
  
  
  argp1 = (std::map< std::string,std::string,std::less< std::string > > *)_swig_go_0;
  if (argp1 == NULL) {
    _swig_gopanic("Attempt to dereference null std::map< std::string,std::string,std::less< std::string > >");
  }
  arg1 = (std::map< std::string,std::string,std::less< std::string > >)*argp1;
  
  
  {
    try {
      result = (ccapi::SessionConfigs *)new ccapi::SessionConfigs(SWIG_STD_MOVE(arg1));
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::SessionConfigs **)&_swig_go_result = (ccapi::SessionConfigs *)result; 
  return _swig_go_result;
}


ccapi::SessionConfigs *_wrap_new_SessionConfigs__SWIG_1_ccapi_00042a34e9364138() {
  ccapi::SessionConfigs *result = 0 ;
  ccapi::SessionConfigs *_swig_go_result;
  
  
  {
    try {
      result = (ccapi::SessionConfigs *)new ccapi::SessionConfigs();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::SessionConfigs **)&_swig_go_result = (ccapi::SessionConfigs *)result; 
  return _swig_go_result;
}


std::map< std::string,std::vector< std::string >,std::less< std::string > > *_wrap_SessionConfigs_getExchangeFieldMap_ccapi_00042a34e9364138(ccapi::SessionConfigs *_swig_go_0) {
  ccapi::SessionConfigs *arg1 = (ccapi::SessionConfigs *) 0 ;
  std::map< std::string,std::vector< std::string >,std::less< std::string > > *result = 0 ;
  std::map< std::string,std::vector< std::string >,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(ccapi::SessionConfigs **)&_swig_go_0; 
  
  {
    try {
      result = (std::map< std::string,std::vector< std::string >,std::less< std::string > > *) &((ccapi::SessionConfigs const *)arg1)->getExchangeFieldMap();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::map< std::string,std::vector< std::string >,std::less< std::string > > **)&_swig_go_result = result; 
  return _swig_go_result;
}


std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > > *_wrap_SessionConfigs_getExchangeFieldWebsocketChannelMap_ccapi_00042a34e9364138(ccapi::SessionConfigs *_swig_go_0) {
  ccapi::SessionConfigs *arg1 = (ccapi::SessionConfigs *) 0 ;
  std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > > *result = 0 ;
  std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(ccapi::SessionConfigs **)&_swig_go_0; 
  
  {
    try {
      result = (std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > > *) &((ccapi::SessionConfigs const *)arg1)->getExchangeFieldWebsocketChannelMap();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::map< std::string,std::map< std::string,std::string,std::less< std::string > >,std::less< std::string > > **)&_swig_go_result = result; 
  return _swig_go_result;
}


std::map< std::string,std::string,std::less< std::string > > *_wrap_SessionConfigs_getUrlWebsocketBase_ccapi_00042a34e9364138(ccapi::SessionConfigs *_swig_go_0) {
  ccapi::SessionConfigs *arg1 = (ccapi::SessionConfigs *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *result = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(ccapi::SessionConfigs **)&_swig_go_0; 
  
  {
    try {
      result = (std::map< std::string,std::string,std::less< std::string > > *) &((ccapi::SessionConfigs const *)arg1)->getUrlWebsocketBase();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_result = result; 
  return _swig_go_result;
}


std::map< std::string,std::string,std::less< std::string > > *_wrap_SessionConfigs_getUrlRestBase_ccapi_00042a34e9364138(ccapi::SessionConfigs *_swig_go_0) {
  ccapi::SessionConfigs *arg1 = (ccapi::SessionConfigs *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *result = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(ccapi::SessionConfigs **)&_swig_go_0; 
  
  {
    try {
      result = (std::map< std::string,std::string,std::less< std::string > > *) &((ccapi::SessionConfigs const *)arg1)->getUrlRestBase();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_result = result; 
  return _swig_go_result;
}


std::map< std::string,std::string,std::less< std::string > > *_wrap_SessionConfigs_getUrlFixBase_ccapi_00042a34e9364138(ccapi::SessionConfigs *_swig_go_0) {
  ccapi::SessionConfigs *arg1 = (ccapi::SessionConfigs *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *result = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(ccapi::SessionConfigs **)&_swig_go_0; 
  
  {
    try {
      result = (std::map< std::string,std::string,std::less< std::string > > *) &((ccapi::SessionConfigs const *)arg1)->getUrlFixBase();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_result = result; 
  return _swig_go_result;
}


std::map< std::string,int,std::less< std::string > > *_wrap_SessionConfigs_getInitialSequenceByExchangeMap_ccapi_00042a34e9364138(ccapi::SessionConfigs *_swig_go_0) {
  ccapi::SessionConfigs *arg1 = (ccapi::SessionConfigs *) 0 ;
  std::map< std::string,int,std::less< std::string > > *result = 0 ;
  std::map< std::string,int,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(ccapi::SessionConfigs **)&_swig_go_0; 
  
  {
    try {
      result = (std::map< std::string,int,std::less< std::string > > *) &((ccapi::SessionConfigs const *)arg1)->getInitialSequenceByExchangeMap();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::map< std::string,int,std::less< std::string > > **)&_swig_go_result = result; 
  return _swig_go_result;
}


std::map< std::string,std::string,std::less< std::string > > *_wrap_SessionConfigs_getCredential_ccapi_00042a34e9364138(ccapi::SessionConfigs *_swig_go_0) {
  ccapi::SessionConfigs *arg1 = (ccapi::SessionConfigs *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *result = 0 ;
  std::map< std::string,std::string,std::less< std::string > > *_swig_go_result;
  
  arg1 = *(ccapi::SessionConfigs **)&_swig_go_0; 
  
  {
    try {
      result = (std::map< std::string,std::string,std::less< std::string > > *) &((ccapi::SessionConfigs const *)arg1)->getCredential();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_SessionConfigs_setUrlWebsocketBase_ccapi_00042a34e9364138(ccapi::SessionConfigs *_swig_go_0, std::map< std::string,std::string,std::less< std::string > > *_swig_go_1) {
  ccapi::SessionConfigs *arg1 = (ccapi::SessionConfigs *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = 0 ;
  
  arg1 = *(ccapi::SessionConfigs **)&_swig_go_0; 
  arg2 = *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->setUrlWebsocketBase((std::map< std::string,std::string,std::less< std::string > > const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_SessionConfigs_setUrlRestBase_ccapi_00042a34e9364138(ccapi::SessionConfigs *_swig_go_0, std::map< std::string,std::string,std::less< std::string > > *_swig_go_1) {
  ccapi::SessionConfigs *arg1 = (ccapi::SessionConfigs *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = 0 ;
  
  arg1 = *(ccapi::SessionConfigs **)&_swig_go_0; 
  arg2 = *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->setUrlRestBase((std::map< std::string,std::string,std::less< std::string > > const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_SessionConfigs_setUrlFixBase_ccapi_00042a34e9364138(ccapi::SessionConfigs *_swig_go_0, std::map< std::string,std::string,std::less< std::string > > *_swig_go_1) {
  ccapi::SessionConfigs *arg1 = (ccapi::SessionConfigs *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = 0 ;
  
  arg1 = *(ccapi::SessionConfigs **)&_swig_go_0; 
  arg2 = *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->setUrlFixBase((std::map< std::string,std::string,std::less< std::string > > const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_SessionConfigs_setCredential_ccapi_00042a34e9364138(ccapi::SessionConfigs *_swig_go_0, std::map< std::string,std::string,std::less< std::string > > *_swig_go_1) {
  ccapi::SessionConfigs *arg1 = (ccapi::SessionConfigs *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > *arg2 = 0 ;
  
  arg1 = *(ccapi::SessionConfigs **)&_swig_go_0; 
  arg2 = *(std::map< std::string,std::string,std::less< std::string > > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->setCredential((std::map< std::string,std::string,std::less< std::string > > const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_delete_SessionConfigs_ccapi_00042a34e9364138(ccapi::SessionConfigs *_swig_go_0) {
  ccapi::SessionConfigs *arg1 = (ccapi::SessionConfigs *) 0 ;
  
  arg1 = *(ccapi::SessionConfigs **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


ccapi::Session *_wrap_new_Session__SWIG_0_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0, ccapi::SessionConfigs *_swig_go_1, ccapi::EventHandler *_swig_go_2, ccapi::EventDispatcher *_swig_go_3) {
  ccapi::SessionOptions *arg1 = 0 ;
  ccapi::SessionConfigs *arg2 = 0 ;
  ccapi::EventHandler *arg3 = (ccapi::EventHandler *) 0 ;
  ccapi::EventDispatcher *arg4 = (ccapi::EventDispatcher *) 0 ;
  ccapi::Session *result = 0 ;
  ccapi::Session *_swig_go_result;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  arg2 = *(ccapi::SessionConfigs **)&_swig_go_1; 
  arg3 = *(ccapi::EventHandler **)&_swig_go_2; 
  arg4 = *(ccapi::EventDispatcher **)&_swig_go_3; 
  
  {
    try {
      result = (ccapi::Session *)new ccapi::Session((ccapi::SessionOptions const &)*arg1,(ccapi::SessionConfigs const &)*arg2,arg3,arg4);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::Session **)&_swig_go_result = (ccapi::Session *)result; 
  return _swig_go_result;
}


ccapi::Session *_wrap_new_Session__SWIG_1_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0, ccapi::SessionConfigs *_swig_go_1, ccapi::EventHandler *_swig_go_2) {
  ccapi::SessionOptions *arg1 = 0 ;
  ccapi::SessionConfigs *arg2 = 0 ;
  ccapi::EventHandler *arg3 = (ccapi::EventHandler *) 0 ;
  ccapi::Session *result = 0 ;
  ccapi::Session *_swig_go_result;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  arg2 = *(ccapi::SessionConfigs **)&_swig_go_1; 
  arg3 = *(ccapi::EventHandler **)&_swig_go_2; 
  
  {
    try {
      result = (ccapi::Session *)new ccapi::Session((ccapi::SessionOptions const &)*arg1,(ccapi::SessionConfigs const &)*arg2,arg3);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::Session **)&_swig_go_result = (ccapi::Session *)result; 
  return _swig_go_result;
}


ccapi::Session *_wrap_new_Session__SWIG_2_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0, ccapi::SessionConfigs *_swig_go_1) {
  ccapi::SessionOptions *arg1 = 0 ;
  ccapi::SessionConfigs *arg2 = 0 ;
  ccapi::Session *result = 0 ;
  ccapi::Session *_swig_go_result;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  arg2 = *(ccapi::SessionConfigs **)&_swig_go_1; 
  
  {
    try {
      result = (ccapi::Session *)new ccapi::Session((ccapi::SessionOptions const &)*arg1,(ccapi::SessionConfigs const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::Session **)&_swig_go_result = (ccapi::Session *)result; 
  return _swig_go_result;
}


ccapi::Session *_wrap_new_Session__SWIG_3_ccapi_00042a34e9364138(ccapi::SessionOptions *_swig_go_0) {
  ccapi::SessionOptions *arg1 = 0 ;
  ccapi::Session *result = 0 ;
  ccapi::Session *_swig_go_result;
  
  arg1 = *(ccapi::SessionOptions **)&_swig_go_0; 
  
  {
    try {
      result = (ccapi::Session *)new ccapi::Session((ccapi::SessionOptions const &)*arg1);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::Session **)&_swig_go_result = (ccapi::Session *)result; 
  return _swig_go_result;
}


ccapi::Session *_wrap_new_Session__SWIG_4_ccapi_00042a34e9364138() {
  ccapi::Session *result = 0 ;
  ccapi::Session *_swig_go_result;
  
  
  {
    try {
      result = (ccapi::Session *)new ccapi::Session();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::Session **)&_swig_go_result = (ccapi::Session *)result; 
  return _swig_go_result;
}


void _wrap_delete_Session_ccapi_00042a34e9364138(ccapi::Session *_swig_go_0) {
  ccapi::Session *arg1 = (ccapi::Session *) 0 ;
  
  arg1 = *(ccapi::Session **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Session_start_ccapi_00042a34e9364138(ccapi::Session *_swig_go_0) {
  ccapi::Session *arg1 = (ccapi::Session *) 0 ;
  
  arg1 = *(ccapi::Session **)&_swig_go_0; 
  
  {
    try {
      (arg1)->start();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Session_stop_ccapi_00042a34e9364138(ccapi::Session *_swig_go_0) {
  ccapi::Session *arg1 = (ccapi::Session *) 0 ;
  
  arg1 = *(ccapi::Session **)&_swig_go_0; 
  
  {
    try {
      (arg1)->stop();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Session_subscribe__SWIG_0_ccapi_00042a34e9364138(ccapi::Session *_swig_go_0, ccapi::Subscription *_swig_go_1) {
  ccapi::Session *arg1 = (ccapi::Session *) 0 ;
  ccapi::Subscription *arg2 = 0 ;
  
  arg1 = *(ccapi::Session **)&_swig_go_0; 
  arg2 = *(ccapi::Subscription **)&_swig_go_1; 
  
  {
    try {
      (arg1)->subscribe(*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Session_subscribe__SWIG_1_ccapi_00042a34e9364138(ccapi::Session *_swig_go_0, std::vector< ccapi::Subscription > *_swig_go_1) {
  ccapi::Session *arg1 = (ccapi::Session *) 0 ;
  std::vector< ccapi::Subscription > *arg2 = 0 ;
  
  arg1 = *(ccapi::Session **)&_swig_go_0; 
  arg2 = *(std::vector< ccapi::Subscription > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->subscribe(*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Session_subscribeByFix__SWIG_0_ccapi_00042a34e9364138(ccapi::Session *_swig_go_0, ccapi::Subscription *_swig_go_1) {
  ccapi::Session *arg1 = (ccapi::Session *) 0 ;
  ccapi::Subscription *arg2 = 0 ;
  
  arg1 = *(ccapi::Session **)&_swig_go_0; 
  arg2 = *(ccapi::Subscription **)&_swig_go_1; 
  
  {
    try {
      (arg1)->subscribeByFix(*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Session_subscribeByFix__SWIG_1_ccapi_00042a34e9364138(ccapi::Session *_swig_go_0, std::vector< ccapi::Subscription > *_swig_go_1) {
  ccapi::Session *arg1 = (ccapi::Session *) 0 ;
  std::vector< ccapi::Subscription > *arg2 = 0 ;
  
  arg1 = *(ccapi::Session **)&_swig_go_0; 
  arg2 = *(std::vector< ccapi::Subscription > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->subscribeByFix(*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Session_onEvent_ccapi_00042a34e9364138(ccapi::Session *_swig_go_0, ccapi::Event *_swig_go_1, ccapi::Queue< ccapi::Event > *_swig_go_2) {
  ccapi::Session *arg1 = (ccapi::Session *) 0 ;
  ccapi::Event *arg2 = 0 ;
  ccapi::Queue< ccapi::Event > *arg3 = (ccapi::Queue< ccapi::Event > *) 0 ;
  
  arg1 = *(ccapi::Session **)&_swig_go_0; 
  arg2 = *(ccapi::Event **)&_swig_go_1; 
  arg3 = *(ccapi::Queue< ccapi::Event > **)&_swig_go_2; 
  
  {
    try {
      (arg1)->onEvent(*arg2,arg3);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Session_sendRequestByFix__SWIG_0_ccapi_00042a34e9364138(ccapi::Session *_swig_go_0, ccapi::Request *_swig_go_1) {
  ccapi::Session *arg1 = (ccapi::Session *) 0 ;
  ccapi::Request *arg2 = 0 ;
  
  arg1 = *(ccapi::Session **)&_swig_go_0; 
  arg2 = *(ccapi::Request **)&_swig_go_1; 
  
  {
    try {
      (arg1)->sendRequestByFix(*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Session_sendRequestByFix__SWIG_1_ccapi_00042a34e9364138(ccapi::Session *_swig_go_0, std::vector< ccapi::Request > *_swig_go_1) {
  ccapi::Session *arg1 = (ccapi::Session *) 0 ;
  std::vector< ccapi::Request > *arg2 = 0 ;
  
  arg1 = *(ccapi::Session **)&_swig_go_0; 
  arg2 = *(std::vector< ccapi::Request > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->sendRequestByFix(*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Session_sendRequestByWebsocket__SWIG_0_ccapi_00042a34e9364138(ccapi::Session *_swig_go_0, ccapi::Request *_swig_go_1) {
  ccapi::Session *arg1 = (ccapi::Session *) 0 ;
  ccapi::Request *arg2 = 0 ;
  
  arg1 = *(ccapi::Session **)&_swig_go_0; 
  arg2 = *(ccapi::Request **)&_swig_go_1; 
  
  {
    try {
      (arg1)->sendRequestByWebsocket(*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Session_sendRequestByWebsocket__SWIG_1_ccapi_00042a34e9364138(ccapi::Session *_swig_go_0, std::vector< ccapi::Request > *_swig_go_1) {
  ccapi::Session *arg1 = (ccapi::Session *) 0 ;
  std::vector< ccapi::Request > *arg2 = 0 ;
  
  arg1 = *(ccapi::Session **)&_swig_go_0; 
  arg2 = *(std::vector< ccapi::Request > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->sendRequestByWebsocket(*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Session_sendRequest__SWIG_0_ccapi_00042a34e9364138(ccapi::Session *_swig_go_0, ccapi::Request *_swig_go_1, ccapi::Queue< ccapi::Event > *_swig_go_2, long long _swig_go_3) {
  ccapi::Session *arg1 = (ccapi::Session *) 0 ;
  ccapi::Request *arg2 = 0 ;
  ccapi::Queue< ccapi::Event > *arg3 = (ccapi::Queue< ccapi::Event > *) 0 ;
  long arg4 ;
  
  arg1 = *(ccapi::Session **)&_swig_go_0; 
  arg2 = *(ccapi::Request **)&_swig_go_1; 
  arg3 = *(ccapi::Queue< ccapi::Event > **)&_swig_go_2; 
  arg4 = (long)_swig_go_3; 
  
  {
    try {
      (arg1)->sendRequest(*arg2,arg3,arg4);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Session_sendRequest__SWIG_1_ccapi_00042a34e9364138(ccapi::Session *_swig_go_0, ccapi::Request *_swig_go_1, ccapi::Queue< ccapi::Event > *_swig_go_2) {
  ccapi::Session *arg1 = (ccapi::Session *) 0 ;
  ccapi::Request *arg2 = 0 ;
  ccapi::Queue< ccapi::Event > *arg3 = (ccapi::Queue< ccapi::Event > *) 0 ;
  
  arg1 = *(ccapi::Session **)&_swig_go_0; 
  arg2 = *(ccapi::Request **)&_swig_go_1; 
  arg3 = *(ccapi::Queue< ccapi::Event > **)&_swig_go_2; 
  
  {
    try {
      (arg1)->sendRequest(*arg2,arg3);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Session_sendRequest__SWIG_2_ccapi_00042a34e9364138(ccapi::Session *_swig_go_0, ccapi::Request *_swig_go_1) {
  ccapi::Session *arg1 = (ccapi::Session *) 0 ;
  ccapi::Request *arg2 = 0 ;
  
  arg1 = *(ccapi::Session **)&_swig_go_0; 
  arg2 = *(ccapi::Request **)&_swig_go_1; 
  
  {
    try {
      (arg1)->sendRequest(*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Session_sendRequest__SWIG_3_ccapi_00042a34e9364138(ccapi::Session *_swig_go_0, std::vector< ccapi::Request > *_swig_go_1, ccapi::Queue< ccapi::Event > *_swig_go_2, long long _swig_go_3) {
  ccapi::Session *arg1 = (ccapi::Session *) 0 ;
  std::vector< ccapi::Request > *arg2 = 0 ;
  ccapi::Queue< ccapi::Event > *arg3 = (ccapi::Queue< ccapi::Event > *) 0 ;
  long arg4 ;
  
  arg1 = *(ccapi::Session **)&_swig_go_0; 
  arg2 = *(std::vector< ccapi::Request > **)&_swig_go_1; 
  arg3 = *(ccapi::Queue< ccapi::Event > **)&_swig_go_2; 
  arg4 = (long)_swig_go_3; 
  
  {
    try {
      (arg1)->sendRequest(*arg2,arg3,arg4);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Session_sendRequest__SWIG_4_ccapi_00042a34e9364138(ccapi::Session *_swig_go_0, std::vector< ccapi::Request > *_swig_go_1, ccapi::Queue< ccapi::Event > *_swig_go_2) {
  ccapi::Session *arg1 = (ccapi::Session *) 0 ;
  std::vector< ccapi::Request > *arg2 = 0 ;
  ccapi::Queue< ccapi::Event > *arg3 = (ccapi::Queue< ccapi::Event > *) 0 ;
  
  arg1 = *(ccapi::Session **)&_swig_go_0; 
  arg2 = *(std::vector< ccapi::Request > **)&_swig_go_1; 
  arg3 = *(ccapi::Queue< ccapi::Event > **)&_swig_go_2; 
  
  {
    try {
      (arg1)->sendRequest(*arg2,arg3);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Session_sendRequest__SWIG_5_ccapi_00042a34e9364138(ccapi::Session *_swig_go_0, std::vector< ccapi::Request > *_swig_go_1) {
  ccapi::Session *arg1 = (ccapi::Session *) 0 ;
  std::vector< ccapi::Request > *arg2 = 0 ;
  
  arg1 = *(ccapi::Session **)&_swig_go_0; 
  arg2 = *(std::vector< ccapi::Request > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->sendRequest(*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


ccapi::Queue< ccapi::Event > *_wrap_Session_getEventQueue_ccapi_00042a34e9364138(ccapi::Session *_swig_go_0) {
  ccapi::Session *arg1 = (ccapi::Session *) 0 ;
  ccapi::Queue< ccapi::Event > *result = 0 ;
  ccapi::Queue< ccapi::Event > *_swig_go_result;
  
  arg1 = *(ccapi::Session **)&_swig_go_0; 
  
  {
    try {
      result = (ccapi::Queue< ccapi::Event > *) &(arg1)->getEventQueue();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::Queue< ccapi::Event > **)&_swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_Session_onError__SWIG_0_ccapi_00042a34e9364138(ccapi::Session *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3, ccapi::Queue< ccapi::Event > *_swig_go_4) {
  ccapi::Session *arg1 = (ccapi::Session *) 0 ;
  ccapi::Event::Type arg2 ;
  ccapi::Message::Type arg3 ;
  std::string *arg4 = 0 ;
  ccapi::Queue< ccapi::Event > *arg5 = (ccapi::Queue< ccapi::Event > *) 0 ;
  
  arg1 = *(ccapi::Session **)&_swig_go_0; 
  arg2 = (ccapi::Event::Type)_swig_go_1; 
  arg3 = (ccapi::Message::Type)_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  arg5 = *(ccapi::Queue< ccapi::Event > **)&_swig_go_4; 
  
  {
    try {
      (arg1)->onError(arg2,arg3,(std::string const &)*arg4,arg5);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Session_onError__SWIG_1_ccapi_00042a34e9364138(ccapi::Session *_swig_go_0, intgo _swig_go_1, intgo _swig_go_2, _gostring_ _swig_go_3) {
  ccapi::Session *arg1 = (ccapi::Session *) 0 ;
  ccapi::Event::Type arg2 ;
  ccapi::Message::Type arg3 ;
  std::string *arg4 = 0 ;
  
  arg1 = *(ccapi::Session **)&_swig_go_0; 
  arg2 = (ccapi::Event::Type)_swig_go_1; 
  arg3 = (ccapi::Message::Type)_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  {
    try {
      (arg1)->onError(arg2,arg3,(std::string const &)*arg4);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


ccapi::Logger *_wrap__swig_NewDirectorLoggerLogger_ccapi_00042a34e9364138(intgo _swig_go_0) {
  int arg1 ;
  ccapi::Logger *result = 0 ;
  ccapi::Logger *_swig_go_result;
  
  arg1 = (int)_swig_go_0; 
  
  {
    try {
      result = new SwigDirector_Logger(arg1);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::Logger **)&_swig_go_result = (ccapi::Logger *)result; 
  return _swig_go_result;
}


void _wrap_DeleteDirectorLogger_ccapi_00042a34e9364138(ccapi::Logger *_swig_go_0) {
  ccapi::Logger *arg1 = (ccapi::Logger *) 0 ;
  
  arg1 = *(ccapi::Logger **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap__swig_DirectorLogger_upcall_LogMessage_ccapi_00042a34e9364138(SwigDirector_Logger *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4, _gostring_ _swig_go_5, _gostring_ _swig_go_6) {
  SwigDirector_Logger *arg1 = (SwigDirector_Logger *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  
  arg1 = *(SwigDirector_Logger **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  std::string arg6_str(_swig_go_5.p, _swig_go_5.n);
  arg6 = &arg6_str;
  
  
  std::string arg7_str(_swig_go_6.p, _swig_go_6.n);
  arg7 = &arg7_str;
  
  
  {
    try {
      arg1->_swig_upcall_logMessage(*arg2, *arg3, *arg4, *arg5, *arg6, *arg7);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Logger_LOG_SEVERITY_FATAL_set_ccapi_00042a34e9364138(ccapi::Logger *_swig_go_0, _gostring_ _swig_go_1) {
  ccapi::Logger *arg1 = (ccapi::Logger *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(ccapi::Logger **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->LOG_SEVERITY_FATAL = *arg2;
  
}


_gostring_ _wrap_Logger_LOG_SEVERITY_FATAL_get_ccapi_00042a34e9364138(ccapi::Logger *_swig_go_0) {
  ccapi::Logger *arg1 = (ccapi::Logger *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Logger **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->LOG_SEVERITY_FATAL);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_Logger_LOG_SEVERITY_ERROR_set_ccapi_00042a34e9364138(ccapi::Logger *_swig_go_0, _gostring_ _swig_go_1) {
  ccapi::Logger *arg1 = (ccapi::Logger *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(ccapi::Logger **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->LOG_SEVERITY_ERROR = *arg2;
  
}


_gostring_ _wrap_Logger_LOG_SEVERITY_ERROR_get_ccapi_00042a34e9364138(ccapi::Logger *_swig_go_0) {
  ccapi::Logger *arg1 = (ccapi::Logger *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Logger **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->LOG_SEVERITY_ERROR);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_Logger_LOG_SEVERITY_WARN_set_ccapi_00042a34e9364138(ccapi::Logger *_swig_go_0, _gostring_ _swig_go_1) {
  ccapi::Logger *arg1 = (ccapi::Logger *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(ccapi::Logger **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->LOG_SEVERITY_WARN = *arg2;
  
}


_gostring_ _wrap_Logger_LOG_SEVERITY_WARN_get_ccapi_00042a34e9364138(ccapi::Logger *_swig_go_0) {
  ccapi::Logger *arg1 = (ccapi::Logger *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Logger **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->LOG_SEVERITY_WARN);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_Logger_LOG_SEVERITY_INFO_set_ccapi_00042a34e9364138(ccapi::Logger *_swig_go_0, _gostring_ _swig_go_1) {
  ccapi::Logger *arg1 = (ccapi::Logger *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(ccapi::Logger **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->LOG_SEVERITY_INFO = *arg2;
  
}


_gostring_ _wrap_Logger_LOG_SEVERITY_INFO_get_ccapi_00042a34e9364138(ccapi::Logger *_swig_go_0) {
  ccapi::Logger *arg1 = (ccapi::Logger *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Logger **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->LOG_SEVERITY_INFO);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_Logger_LOG_SEVERITY_DEBUG_set_ccapi_00042a34e9364138(ccapi::Logger *_swig_go_0, _gostring_ _swig_go_1) {
  ccapi::Logger *arg1 = (ccapi::Logger *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(ccapi::Logger **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->LOG_SEVERITY_DEBUG = *arg2;
  
}


_gostring_ _wrap_Logger_LOG_SEVERITY_DEBUG_get_ccapi_00042a34e9364138(ccapi::Logger *_swig_go_0) {
  ccapi::Logger *arg1 = (ccapi::Logger *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Logger **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->LOG_SEVERITY_DEBUG);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_Logger_LOG_SEVERITY_TRACE_set_ccapi_00042a34e9364138(ccapi::Logger *_swig_go_0, _gostring_ _swig_go_1) {
  ccapi::Logger *arg1 = (ccapi::Logger *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(ccapi::Logger **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->LOG_SEVERITY_TRACE = *arg2;
  
}


_gostring_ _wrap_Logger_LOG_SEVERITY_TRACE_get_ccapi_00042a34e9364138(ccapi::Logger *_swig_go_0) {
  ccapi::Logger *arg1 = (ccapi::Logger *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Logger **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->LOG_SEVERITY_TRACE);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_delete_Logger_ccapi_00042a34e9364138(ccapi::Logger *_swig_go_0) {
  ccapi::Logger *arg1 = (ccapi::Logger *) 0 ;
  
  arg1 = *(ccapi::Logger **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Logger_fatal_ccapi_00042a34e9364138(ccapi::Logger *_swig_go_0, std::thread::id *_swig_go_1, std::chrono::system_clock::time_point *_swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4, _gostring_ _swig_go_5) {
  ccapi::Logger *arg1 = (ccapi::Logger *) 0 ;
  std::thread::id *arg2 = 0 ;
  std::chrono::system_clock::time_point *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  
  arg1 = *(ccapi::Logger **)&_swig_go_0; 
  arg2 = *(std::thread::id **)&_swig_go_1; 
  arg3 = *(std::chrono::system_clock::time_point **)&_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  std::string arg6_str(_swig_go_5.p, _swig_go_5.n);
  arg6 = &arg6_str;
  
  
  {
    try {
      (arg1)->fatal((std::thread::id const &)*arg2,(std::chrono::system_clock::time_point const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Logger_error_ccapi_00042a34e9364138(ccapi::Logger *_swig_go_0, std::thread::id *_swig_go_1, std::chrono::system_clock::time_point *_swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4, _gostring_ _swig_go_5) {
  ccapi::Logger *arg1 = (ccapi::Logger *) 0 ;
  std::thread::id *arg2 = 0 ;
  std::chrono::system_clock::time_point *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  
  arg1 = *(ccapi::Logger **)&_swig_go_0; 
  arg2 = *(std::thread::id **)&_swig_go_1; 
  arg3 = *(std::chrono::system_clock::time_point **)&_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  std::string arg6_str(_swig_go_5.p, _swig_go_5.n);
  arg6 = &arg6_str;
  
  
  {
    try {
      (arg1)->error((std::thread::id const &)*arg2,(std::chrono::system_clock::time_point const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Logger_warn_ccapi_00042a34e9364138(ccapi::Logger *_swig_go_0, std::thread::id *_swig_go_1, std::chrono::system_clock::time_point *_swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4, _gostring_ _swig_go_5) {
  ccapi::Logger *arg1 = (ccapi::Logger *) 0 ;
  std::thread::id *arg2 = 0 ;
  std::chrono::system_clock::time_point *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  
  arg1 = *(ccapi::Logger **)&_swig_go_0; 
  arg2 = *(std::thread::id **)&_swig_go_1; 
  arg3 = *(std::chrono::system_clock::time_point **)&_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  std::string arg6_str(_swig_go_5.p, _swig_go_5.n);
  arg6 = &arg6_str;
  
  
  {
    try {
      (arg1)->warn((std::thread::id const &)*arg2,(std::chrono::system_clock::time_point const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Logger_info_ccapi_00042a34e9364138(ccapi::Logger *_swig_go_0, std::thread::id *_swig_go_1, std::chrono::system_clock::time_point *_swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4, _gostring_ _swig_go_5) {
  ccapi::Logger *arg1 = (ccapi::Logger *) 0 ;
  std::thread::id *arg2 = 0 ;
  std::chrono::system_clock::time_point *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  
  arg1 = *(ccapi::Logger **)&_swig_go_0; 
  arg2 = *(std::thread::id **)&_swig_go_1; 
  arg3 = *(std::chrono::system_clock::time_point **)&_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  std::string arg6_str(_swig_go_5.p, _swig_go_5.n);
  arg6 = &arg6_str;
  
  
  {
    try {
      (arg1)->info((std::thread::id const &)*arg2,(std::chrono::system_clock::time_point const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Logger_debug_ccapi_00042a34e9364138(ccapi::Logger *_swig_go_0, std::thread::id *_swig_go_1, std::chrono::system_clock::time_point *_swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4, _gostring_ _swig_go_5) {
  ccapi::Logger *arg1 = (ccapi::Logger *) 0 ;
  std::thread::id *arg2 = 0 ;
  std::chrono::system_clock::time_point *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  
  arg1 = *(ccapi::Logger **)&_swig_go_0; 
  arg2 = *(std::thread::id **)&_swig_go_1; 
  arg3 = *(std::chrono::system_clock::time_point **)&_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  std::string arg6_str(_swig_go_5.p, _swig_go_5.n);
  arg6 = &arg6_str;
  
  
  {
    try {
      (arg1)->debug((std::thread::id const &)*arg2,(std::chrono::system_clock::time_point const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Logger_trace_ccapi_00042a34e9364138(ccapi::Logger *_swig_go_0, std::thread::id *_swig_go_1, std::chrono::system_clock::time_point *_swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4, _gostring_ _swig_go_5) {
  ccapi::Logger *arg1 = (ccapi::Logger *) 0 ;
  std::thread::id *arg2 = 0 ;
  std::chrono::system_clock::time_point *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  
  arg1 = *(ccapi::Logger **)&_swig_go_0; 
  arg2 = *(std::thread::id **)&_swig_go_1; 
  arg3 = *(std::chrono::system_clock::time_point **)&_swig_go_2; 
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  std::string arg6_str(_swig_go_5.p, _swig_go_5.n);
  arg6 = &arg6_str;
  
  
  {
    try {
      (arg1)->trace((std::thread::id const &)*arg2,(std::chrono::system_clock::time_point const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_Logger_logger_set_ccapi_00042a34e9364138(ccapi::Logger *_swig_go_0) {
  ccapi::Logger *arg1 = (ccapi::Logger *) 0 ;
  
  arg1 = *(ccapi::Logger **)&_swig_go_0; 
  
  ccapi::Logger::logger = arg1;
  
}


ccapi::Logger *_wrap_Logger_logger_get_ccapi_00042a34e9364138() {
  ccapi::Logger *result = 0 ;
  ccapi::Logger *_swig_go_result;
  
  
  result = (ccapi::Logger *)ccapi::Logger::logger;
  *(ccapi::Logger **)&_swig_go_result = (ccapi::Logger *)result; 
  return _swig_go_result;
}


void _wrap_Logger_logMessage_ccapi_00042a34e9364138(ccapi::Logger *_swig_go_0, _gostring_ _swig_go_1, _gostring_ _swig_go_2, _gostring_ _swig_go_3, _gostring_ _swig_go_4, _gostring_ _swig_go_5, _gostring_ _swig_go_6) {
  ccapi::Logger *arg1 = (ccapi::Logger *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  
  arg1 = *(ccapi::Logger **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(_swig_go_2.p, _swig_go_2.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(_swig_go_3.p, _swig_go_3.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(_swig_go_4.p, _swig_go_4.n);
  arg5 = &arg5_str;
  
  
  std::string arg6_str(_swig_go_5.p, _swig_go_5.n);
  arg6 = &arg6_str;
  
  
  std::string arg7_str(_swig_go_6.p, _swig_go_6.n);
  arg7 = &arg7_str;
  
  
  {
    try {
      (arg1)->logMessage((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


ccapi::Logger *_wrap_new_Logger_ccapi_00042a34e9364138() {
  ccapi::Logger *result = 0 ;
  ccapi::Logger *_swig_go_result;
  
  
  {
    try {
      result = (ccapi::Logger *)new ccapi::Logger();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::Logger **)&_swig_go_result = (ccapi::Logger *)result; 
  return _swig_go_result;
}


void _wrap_EventQueue_EXCEPTION_QUEUE_FULL_set_ccapi_00042a34e9364138(ccapi::Queue< ccapi::Event > *_swig_go_0, _gostring_ _swig_go_1) {
  ccapi::Queue< ccapi::Event > *arg1 = (ccapi::Queue< ccapi::Event > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(ccapi::Queue< ccapi::Event > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->EXCEPTION_QUEUE_FULL = *arg2;
  
}


_gostring_ _wrap_EventQueue_EXCEPTION_QUEUE_FULL_get_ccapi_00042a34e9364138(ccapi::Queue< ccapi::Event > *_swig_go_0) {
  ccapi::Queue< ccapi::Event > *arg1 = (ccapi::Queue< ccapi::Event > *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Queue< ccapi::Event > **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->EXCEPTION_QUEUE_FULL);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


void _wrap_EventQueue_EXCEPTION_QUEUE_EMPTY_set_ccapi_00042a34e9364138(ccapi::Queue< ccapi::Event > *_swig_go_0, _gostring_ _swig_go_1) {
  ccapi::Queue< ccapi::Event > *arg1 = (ccapi::Queue< ccapi::Event > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = *(ccapi::Queue< ccapi::Event > **)&_swig_go_0; 
  
  std::string arg2_str(_swig_go_1.p, _swig_go_1.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->EXCEPTION_QUEUE_EMPTY = *arg2;
  
}


_gostring_ _wrap_EventQueue_EXCEPTION_QUEUE_EMPTY_get_ccapi_00042a34e9364138(ccapi::Queue< ccapi::Event > *_swig_go_0) {
  ccapi::Queue< ccapi::Event > *arg1 = (ccapi::Queue< ccapi::Event > *) 0 ;
  std::string *result = 0 ;
  _gostring_ _swig_go_result;
  
  arg1 = *(ccapi::Queue< ccapi::Event > **)&_swig_go_0; 
  
  result = (std::string *) & ((arg1)->EXCEPTION_QUEUE_EMPTY);
  _swig_go_result = Swig_AllocateString((*result).data(), (*result).length()); 
  return _swig_go_result;
}


ccapi::Queue< ccapi::Event > *_wrap_new_EventQueue__SWIG_0_ccapi_00042a34e9364138(long long _swig_go_0) {
  size_t arg1 ;
  ccapi::Queue< ccapi::Event > *result = 0 ;
  ccapi::Queue< ccapi::Event > *_swig_go_result;
  
  arg1 = (size_t)_swig_go_0; 
  
  {
    try {
      result = (ccapi::Queue< ccapi::Event > *)new ccapi::Queue< ccapi::Event >(SWIG_STD_MOVE(arg1));
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::Queue< ccapi::Event > **)&_swig_go_result = (ccapi::Queue< ccapi::Event > *)result; 
  return _swig_go_result;
}


ccapi::Queue< ccapi::Event > *_wrap_new_EventQueue__SWIG_1_ccapi_00042a34e9364138() {
  ccapi::Queue< ccapi::Event > *result = 0 ;
  ccapi::Queue< ccapi::Event > *_swig_go_result;
  
  
  {
    try {
      result = (ccapi::Queue< ccapi::Event > *)new ccapi::Queue< ccapi::Event >();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::Queue< ccapi::Event > **)&_swig_go_result = (ccapi::Queue< ccapi::Event > *)result; 
  return _swig_go_result;
}


void _wrap_EventQueue_pushBack__SWIG_0_ccapi_00042a34e9364138(ccapi::Queue< ccapi::Event > *_swig_go_0, ccapi::Event *_swig_go_1) {
  ccapi::Queue< ccapi::Event > *arg1 = (ccapi::Queue< ccapi::Event > *) 0 ;
  ccapi::Event *arg2 = 0 ;
  
  arg1 = *(ccapi::Queue< ccapi::Event > **)&_swig_go_0; 
  arg2 = *(ccapi::Event **)&_swig_go_1; 
  
  {
    try {
      (arg1)->pushBack((ccapi::Event const &)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


void _wrap_EventQueue_pushBack__SWIG_1_ccapi_00042a34e9364138(ccapi::Queue< ccapi::Event > *_swig_go_0, ccapi::Event *_swig_go_1) {
  ccapi::Queue< ccapi::Event > *arg1 = (ccapi::Queue< ccapi::Event > *) 0 ;
  ccapi::Event *arg2 = 0 ;
  std::unique_ptr< ccapi::Event > rvrdeleter2 ;
  
  arg1 = *(ccapi::Queue< ccapi::Event > **)&_swig_go_0; 
  arg2 = *(ccapi::Event **)&_swig_go_1;
  rvrdeleter2.reset(arg2); 
  
  {
    try {
      (arg1)->pushBack((ccapi::Event &&)*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


ccapi::Event *_wrap_EventQueue_popBack_ccapi_00042a34e9364138(ccapi::Queue< ccapi::Event > *_swig_go_0) {
  ccapi::Queue< ccapi::Event > *arg1 = (ccapi::Queue< ccapi::Event > *) 0 ;
  ccapi::Event result;
  ccapi::Event *_swig_go_result;
  
  arg1 = *(ccapi::Queue< ccapi::Event > **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->popBack();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(ccapi::Event **)&_swig_go_result = new ccapi::Event(result); 
  return _swig_go_result;
}


std::vector< ccapi::Event > *_wrap_EventQueue_purge_ccapi_00042a34e9364138(ccapi::Queue< ccapi::Event > *_swig_go_0) {
  ccapi::Queue< ccapi::Event > *arg1 = (ccapi::Queue< ccapi::Event > *) 0 ;
  std::vector< ccapi::Event > result;
  std::vector< ccapi::Event > *_swig_go_result;
  
  arg1 = *(ccapi::Queue< ccapi::Event > **)&_swig_go_0; 
  
  {
    try {
      result = (arg1)->purge();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  *(std::vector< ccapi::Event > **)&_swig_go_result = new std::vector< ccapi::Event >(result); 
  return _swig_go_result;
}


void _wrap_EventQueue_removeAll_ccapi_00042a34e9364138(ccapi::Queue< ccapi::Event > *_swig_go_0, std::vector< ccapi::Event > *_swig_go_1) {
  ccapi::Queue< ccapi::Event > *arg1 = (ccapi::Queue< ccapi::Event > *) 0 ;
  std::vector< ccapi::Event > *arg2 = 0 ;
  
  arg1 = *(ccapi::Queue< ccapi::Event > **)&_swig_go_0; 
  arg2 = *(std::vector< ccapi::Event > **)&_swig_go_1; 
  
  {
    try {
      (arg1)->removeAll(*arg2);
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


long long _wrap_EventQueue_size_ccapi_00042a34e9364138(ccapi::Queue< ccapi::Event > *_swig_go_0) {
  ccapi::Queue< ccapi::Event > *arg1 = (ccapi::Queue< ccapi::Event > *) 0 ;
  size_t result;
  long long _swig_go_result;
  
  arg1 = *(ccapi::Queue< ccapi::Event > **)&_swig_go_0; 
  
  {
    try {
      result = ((ccapi::Queue< ccapi::Event > const *)arg1)->size();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


bool _wrap_EventQueue_empty_ccapi_00042a34e9364138(ccapi::Queue< ccapi::Event > *_swig_go_0) {
  ccapi::Queue< ccapi::Event > *arg1 = (ccapi::Queue< ccapi::Event > *) 0 ;
  bool result;
  bool _swig_go_result;
  
  arg1 = *(ccapi::Queue< ccapi::Event > **)&_swig_go_0; 
  
  {
    try {
      result = (bool)((ccapi::Queue< ccapi::Event > const *)arg1)->empty();
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  _swig_go_result = result; 
  return _swig_go_result;
}


void _wrap_delete_EventQueue_ccapi_00042a34e9364138(ccapi::Queue< ccapi::Event > *_swig_go_0) {
  ccapi::Queue< ccapi::Event > *arg1 = (ccapi::Queue< ccapi::Event > *) 0 ;
  
  arg1 = *(ccapi::Queue< ccapi::Event > **)&_swig_go_0; 
  
  {
    try {
      delete arg1;
    } catch (std::exception &e) {
      std::string s("error: "), s2(e.what());
      s = s + s2;
      SWIG_exception(SWIG_RuntimeError, s.c_str());
    }
  }
  
}


#ifdef __cplusplus
}
#endif

